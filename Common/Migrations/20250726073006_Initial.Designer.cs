// <auto-generated />
using System;
using Common.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250726073006_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Context.Entities.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedAt")
                        .IsDescending();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Common.Context.Entities.MqttServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("IsARelayType")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsHighLoad")
                        .HasColumnType("boolean");

                    b.Property<bool>("MqttPostJson")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<long?>("RelayPositionPrecision")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShouldBeRelayed")
                        .HasColumnType("boolean");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseWorker")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("MqttServers");
                });

            modelBuilder.Entity("Common.Context.Entities.NeighborInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<double?>("Distance")
                        .HasColumnType("double precision");

                    b.Property<long>("NodeHeardId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NodeHeardPositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("NodeReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NodeReceiverPositionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Rssi")
                        .HasColumnType("real");

                    b.Property<float>("Snr")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DataSource");

                    b.HasIndex("NodeHeardId");

                    b.HasIndex("NodeHeardPositionId");

                    b.HasIndex("NodeReceiverId");

                    b.HasIndex("NodeReceiverPositionId");

                    b.HasIndex("PacketId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("NeighborInfos");
                });

            modelBuilder.Entity("Common.Context.Entities.Node", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AllNames")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("Altitude")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirmwareVersion")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("HardwareModel")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool?>("HasDefaultChannel")
                        .HasColumnType("boolean");

                    b.Property<int?>("HopStart")
                        .HasColumnType("integer");

                    b.Property<bool>("Ignored")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsMqttGateway")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LongName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("ModemPreset")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long?>("MqttServerId")
                        .HasColumnType("bigint");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NodeIdString")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int?>("NumOnlineLocalNodes")
                        .HasColumnType("integer");

                    b.Property<string>("OldAllNames")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PrimaryChannel")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Role")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AllNames");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LastSeen")
                        .IsDescending();

                    b.HasIndex("LongName");

                    b.HasIndex("ModemPreset");

                    b.HasIndex("MqttServerId");

                    b.HasIndex("NodeId");

                    b.HasIndex("NodeIdString");

                    b.HasIndex("RegionCode");

                    b.HasIndex("Role");

                    b.HasIndex("ShortName");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Common.Context.Entities.Packet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChannelIndex")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Encrypted")
                        .HasColumnType("boolean");

                    b.Property<long>("FromId")
                        .HasColumnType("bigint");

                    b.Property<double?>("GatewayDistanceKm")
                        .HasColumnType("double precision");

                    b.Property<long>("GatewayId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GatewayPositionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("HopLimit")
                        .HasColumnType("integer");

                    b.Property<int?>("HopStart")
                        .HasColumnType("integer");

                    b.Property<long?>("MqttServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("MqttTopic")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("NextHop")
                        .HasColumnType("bigint");

                    b.Property<long?>("NextHopId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PacketDuplicatedId")
                        .HasColumnType("bigint");

                    b.Property<long>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("bytea");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortNum")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PortNumVariant")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Priority")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<long?>("RelayNode")
                        .HasColumnType("bigint");

                    b.Property<long?>("RelayNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReplyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<float?>("RxRssi")
                        .HasColumnType("real");

                    b.Property<float?>("RxSnr")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("RxTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ToId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("ViaMqtt")
                        .HasColumnType("boolean");

                    b.Property<bool?>("WantAck")
                        .HasColumnType("boolean");

                    b.Property<bool?>("WantResponse")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FromId");

                    b.HasIndex("GatewayId");

                    b.HasIndex("GatewayPositionId");

                    b.HasIndex("MqttServerId");

                    b.HasIndex("NextHopId");

                    b.HasIndex("PacketDuplicatedId");

                    b.HasIndex("PacketId");

                    b.HasIndex("PortNum");

                    b.HasIndex("PortNumVariant");

                    b.HasIndex("PositionId");

                    b.HasIndex("RelayNodeId");

                    b.HasIndex("ToId");

                    b.ToTable("Packets");
                });

            modelBuilder.Entity("Common.Context.Entities.PaxCounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Ble")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Uptime")
                        .HasColumnType("bigint");

                    b.Property<long>("Wifi")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NodeId");

                    b.HasIndex("PacketId");

                    b.ToTable("PaxCounters");
                });

            modelBuilder.Entity("Common.Context.Entities.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("Altitude")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NodeId");

                    b.HasIndex("PacketId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Common.Context.Entities.Router.NodeConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<bool>("Forbidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSeenOnMqtt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MqttId")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Department");

                    b.HasIndex("MqttId");

                    b.HasIndex("NodeId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("NodeConfigurations", "router");
                });

            modelBuilder.Entity("Common.Context.Entities.Router.PacketActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HopLimit")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBroadcast")
                        .HasColumnType("boolean");

                    b.Property<long>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiverIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PacketId")
                        .IsUnique();

                    b.ToTable("PacketActivities", "router");
                });

            modelBuilder.Entity("Common.Context.Entities.Router.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConnectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Ip")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TempBP")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "router");
                });

            modelBuilder.Entity("Common.Context.Entities.SignalHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NodeHeardId")
                        .HasColumnType("bigint");

                    b.Property<long>("NodeReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Rssi")
                        .HasColumnType("real");

                    b.Property<float>("Snr")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NodeHeardId");

                    b.HasIndex("NodeReceiverId");

                    b.HasIndex("PacketId");

                    b.ToTable("SignalHistories");
                });

            modelBuilder.Entity("Common.Context.Entities.Telemetry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("AirUtilTx")
                        .HasColumnType("real");

                    b.Property<float?>("BarometricPressure")
                        .HasColumnType("real");

                    b.Property<long?>("BatteryLevel")
                        .HasColumnType("bigint");

                    b.Property<float?>("Channel1Current")
                        .HasColumnType("real");

                    b.Property<float?>("Channel1Voltage")
                        .HasColumnType("real");

                    b.Property<float?>("Channel2Current")
                        .HasColumnType("real");

                    b.Property<float?>("Channel2Voltage")
                        .HasColumnType("real");

                    b.Property<float?>("Channel3Current")
                        .HasColumnType("real");

                    b.Property<float?>("Channel3Voltage")
                        .HasColumnType("real");

                    b.Property<float?>("ChannelUtilization")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("GasResistance")
                        .HasColumnType("real");

                    b.Property<long?>("Iaq")
                        .HasColumnType("bigint");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumPacketsRx")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumPacketsRxBad")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumPacketsTx")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumRxDupe")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumTxRelay")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumTxRelayCanceled")
                        .HasColumnType("bigint");

                    b.Property<long?>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<float?>("RelativeHumidity")
                        .HasColumnType("real");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("Uptime")
                        .HasColumnType("interval");

                    b.Property<float?>("Voltage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("NodeId");

                    b.HasIndex("PacketId");

                    b.HasIndex("Type");

                    b.ToTable("Telemetries");
                });

            modelBuilder.Entity("Common.Context.Entities.TextMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FromId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<long?>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FromId");

                    b.HasIndex("PacketId");

                    b.HasIndex("ToId");

                    b.ToTable("TextMessages");
                });

            modelBuilder.Entity("Common.Context.Entities.Waypoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("Icon")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("WaypointId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("NodeId");

                    b.HasIndex("PacketId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("WaypointId");

                    b.ToTable("Waypoints");
                });

            modelBuilder.Entity("Common.Context.Entities.Webhook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowByHimSelf")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowDuplication")
                        .HasColumnType("boolean");

                    b.Property<string>("Channel")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DistanceAroundPositionKm")
                        .HasColumnType("integer");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<long?>("From")
                        .HasColumnType("bigint");

                    b.Property<long?>("FromOrTo")
                        .HasColumnType("bigint");

                    b.Property<long?>("Gateway")
                        .HasColumnType("bigint");

                    b.Property<bool>("IncludeHopsDetails")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludePayloadDetails")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludeStats")
                        .HasColumnType("boolean");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("MinimumMinutesBetweenPacketsWhenIncludeStats")
                        .HasColumnType("integer");

                    b.Property<int?>("MinimumNumberOfPacketsWhenIncludeStats")
                        .HasColumnType("integer");

                    b.Property<long?>("MqttServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("OnlyWhenDifferentMqttServer")
                        .HasColumnType("boolean");

                    b.Property<int?>("PortNum")
                        .HasColumnType("integer");

                    b.Property<long?>("To")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("UrlToEditMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("MqttServerId");

                    b.ToTable("Webhooks");
                });

            modelBuilder.Entity("Common.Context.Entities.WebhookHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("PacketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("WebhookId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PacketId");

                    b.HasIndex("WebhookId");

                    b.ToTable("WebhooksHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "router");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "router");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "router");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "router");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "router");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "router");
                });

            modelBuilder.Entity("Common.Context.Entities.NeighborInfo", b =>
                {
                    b.HasOne("Common.Context.Entities.Node", "NodeHeard")
                        .WithMany("NeighborsFor")
                        .HasForeignKey("NodeHeardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Position", "NodeHeardPosition")
                        .WithMany()
                        .HasForeignKey("NodeHeardPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Node", "NodeReceiver")
                        .WithMany("MyNeighbors")
                        .HasForeignKey("NodeReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Position", "NodeReceiverPosition")
                        .WithMany()
                        .HasForeignKey("NodeReceiverPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NodeHeard");

                    b.Navigation("NodeHeardPosition");

                    b.Navigation("NodeReceiver");

                    b.Navigation("NodeReceiverPosition");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Common.Context.Entities.Node", b =>
                {
                    b.HasOne("Common.Context.Entities.MqttServer", "MqttServer")
                        .WithMany("Nodes")
                        .HasForeignKey("MqttServerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MqttServer");
                });

            modelBuilder.Entity("Common.Context.Entities.Packet", b =>
                {
                    b.HasOne("Common.Context.Entities.Channel", "Channel")
                        .WithMany("Packets")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Node", "From")
                        .WithMany("PacketsFrom")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Node", "Gateway")
                        .WithMany("PacketsGateway")
                        .HasForeignKey("GatewayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Position", "GatewayPosition")
                        .WithMany()
                        .HasForeignKey("GatewayPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.MqttServer", "MqttServer")
                        .WithMany("Packets")
                        .HasForeignKey("MqttServerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Node", "NextHopNode")
                        .WithMany("NextHopFor")
                        .HasForeignKey("NextHopId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Packet", "PacketDuplicated")
                        .WithMany("AllDuplicatedPackets")
                        .HasForeignKey("PacketDuplicatedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Node", "RelayNodeNode")
                        .WithMany("RelayFor")
                        .HasForeignKey("RelayNodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Node", "To")
                        .WithMany("PacketsTo")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("From");

                    b.Navigation("Gateway");

                    b.Navigation("GatewayPosition");

                    b.Navigation("MqttServer");

                    b.Navigation("NextHopNode");

                    b.Navigation("PacketDuplicated");

                    b.Navigation("Position");

                    b.Navigation("RelayNodeNode");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Common.Context.Entities.PaxCounter", b =>
                {
                    b.HasOne("Common.Context.Entities.Node", "Node")
                        .WithMany("PaxCounters")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Node");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Common.Context.Entities.Position", b =>
                {
                    b.HasOne("Common.Context.Entities.Node", "Node")
                        .WithMany("Positions")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Node");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Common.Context.Entities.Router.NodeConfiguration", b =>
                {
                    b.HasOne("Common.Context.Entities.Node", "Node")
                        .WithOne("NodeConfiguration")
                        .HasForeignKey("Common.Context.Entities.Router.NodeConfiguration", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Router.User", "User")
                        .WithMany("NodeConfigurations")
                        .HasForeignKey("UserId");

                    b.Navigation("Node");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Context.Entities.Router.PacketActivity", b =>
                {
                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithOne("PacketActivity")
                        .HasForeignKey("Common.Context.Entities.Router.PacketActivity", "PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Common.Context.Entities.SignalHistory", b =>
                {
                    b.HasOne("Common.Context.Entities.Node", "NodeHeard")
                        .WithMany()
                        .HasForeignKey("NodeHeardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Node", "NodeReceiver")
                        .WithMany()
                        .HasForeignKey("NodeReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NodeHeard");

                    b.Navigation("NodeReceiver");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Common.Context.Entities.Telemetry", b =>
                {
                    b.HasOne("Common.Context.Entities.Node", "Node")
                        .WithMany("Telemetries")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Node");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Common.Context.Entities.TextMessage", b =>
                {
                    b.HasOne("Common.Context.Entities.Channel", "Channel")
                        .WithMany("TextMessages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Node", "From")
                        .WithMany("TextMessagesFrom")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Common.Context.Entities.Node", "To")
                        .WithMany("TextMessagesTo")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("From");

                    b.Navigation("Packet");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Common.Context.Entities.Waypoint", b =>
                {
                    b.HasOne("Common.Context.Entities.Node", "Node")
                        .WithMany("Waypoints")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Node");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Common.Context.Entities.Webhook", b =>
                {
                    b.HasOne("Common.Context.Entities.MqttServer", "MqttServer")
                        .WithMany()
                        .HasForeignKey("MqttServerId");

                    b.Navigation("MqttServer");
                });

            modelBuilder.Entity("Common.Context.Entities.WebhookHistory", b =>
                {
                    b.HasOne("Common.Context.Entities.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Webhook", "Webhook")
                        .WithMany("Histories")
                        .HasForeignKey("WebhookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packet");

                    b.Navigation("Webhook");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Common.Context.Entities.Router.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Common.Context.Entities.Router.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Context.Entities.Router.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Common.Context.Entities.Router.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Context.Entities.Channel", b =>
                {
                    b.Navigation("Packets");

                    b.Navigation("TextMessages");
                });

            modelBuilder.Entity("Common.Context.Entities.MqttServer", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("Packets");
                });

            modelBuilder.Entity("Common.Context.Entities.Node", b =>
                {
                    b.Navigation("MyNeighbors");

                    b.Navigation("NeighborsFor");

                    b.Navigation("NextHopFor");

                    b.Navigation("NodeConfiguration");

                    b.Navigation("PacketsFrom");

                    b.Navigation("PacketsGateway");

                    b.Navigation("PacketsTo");

                    b.Navigation("PaxCounters");

                    b.Navigation("Positions");

                    b.Navigation("RelayFor");

                    b.Navigation("Telemetries");

                    b.Navigation("TextMessagesFrom");

                    b.Navigation("TextMessagesTo");

                    b.Navigation("Waypoints");
                });

            modelBuilder.Entity("Common.Context.Entities.Packet", b =>
                {
                    b.Navigation("AllDuplicatedPackets");

                    b.Navigation("PacketActivity");
                });

            modelBuilder.Entity("Common.Context.Entities.Router.User", b =>
                {
                    b.Navigation("NodeConfigurations");
                });

            modelBuilder.Entity("Common.Context.Entities.Webhook", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
