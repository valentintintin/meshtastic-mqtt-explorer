@using System.Globalization
@using MeshtasticMqttExplorer.Context.Entities
@using MeshtasticMqttExplorer.Extensions
@using MeshtasticMqttExplorer.Models
@using Telemetry = MeshtasticMqttExplorer.Context.Entities.Telemetry

@if (NodeInfo != null)
{
    <GridRow Gutter="(16, 16)" Justify="center">

    <GridCol Xs="24" Md="16">
        <Card Style="width:100%;" Title="Position">
            @if (NodeInfo?.Latitude.HasValue == true && NodeInfo?.Longitude.HasValue == true)
            {
                <p>Altitude : <b>@(NodeInfo.Altitude?.ToString() ?? "-")m</b></p>

                <Osm Latitude="NodeInfo.Latitude!.Value" Longitude="NodeInfo.Longitude!.Value" Zoom="13" @ref="Map"></Osm>
            }
            else
            {
                <Empty></Empty>
            }
        </Card>
    </GridCol>
    
    <GridCol Xs="24" Md="8">
        <Card Title="Activité">
            <ChildContent>
                <Descriptions Bordered="true" Column="1">
                    <DescriptionsItem Title="Vu pour la dernière fois" ContentStyle="font-weight: bold">
                        <Date Value="NodeInfo.LastSeen" Fallback="-"></Date>
                    </DescriptionsItem>

                    <DescriptionsItem Title="Vu il y a" ContentStyle="font-weight: bold">
                        <TimeElapsed Value="@(DateTime.UtcNow - NodeInfo.LastSeen)" Fallback="-"></TimeElapsed>
                    </DescriptionsItem>
                    
                    <DescriptionsItem Title="Nombre de trames (aujourd'hui/hier/total)" ContentStyle="font-weight: bold">
                        @(NbPackets?.Today ?? 0)/@(NbPackets?.Yesterday ?? 0)/@(NbPackets?.Total ?? 0)
                        <a href="/node/@NodeInfo.Id/packets">Voir</a>
                    </DescriptionsItem>
                    
                    <DescriptionsItem Title="Passerelle MQTT ?" ContentStyle="font-weight: bold">
                        @(NodeInfo?.IsMqttGateway == true ? "Oui" : "Non")
                    </DescriptionsItem>
                    
                    <DescriptionsItem Title="Canal par défaut ?" ContentStyle="font-weight: bold">
                        @(NodeInfo?.HasDefaultChannel == true ? "Oui" : "Non")
                    </DescriptionsItem>
                    
                    <DescriptionsItem Title="Nombre de nœuds locaux entendus" ContentStyle="font-weight: bold">
                        @(NodeInfo?.NumOnlineLocalNodes ?? 0)
                    </DescriptionsItem>
                </Descriptions>
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="12">
        <Card Title="Télémétrie">
            <ChildContent>
                <Descriptions Bordered="true" Column="1">
                    <DescriptionsItem Title="Durée de fonctionnement" ContentStyle="font-weight: bold">
                        <TimeElapsed Value="LastTelemetryDevice?.Uptime" Fallback="-"></TimeElapsed>
                    </DescriptionsItem>

                    <DescriptionsItem Title="Utilisation du canal" ContentStyle="font-weight: bold">
                        @(LastTelemetryDevice?.ChannelUtilization?.ToString() ?? "-")%
                    </DescriptionsItem>

                    <DescriptionsItem Title="Emission sur l'air" ContentStyle="font-weight: bold">
                        @(LastTelemetryDevice?.AirUtilTx?.ToString() ?? "-")%
                    </DescriptionsItem>

                    <DescriptionsItem Title="Batterie" ContentStyle="font-weight: bold">
                        @(LastTelemetryDevice?.BatteryLevel?.ToString() ?? "-")% @(LastTelemetryDevice?.Voltage?.ToString() ?? "-")V
                    </DescriptionsItem>

                    <DescriptionsItem Title="Température" ContentStyle="font-weight: bold">
                        @(LastTelemetryEnvironment?.Temperature?.ToString() ?? "-")°C
                    </DescriptionsItem>

                    <DescriptionsItem Title="Humidité" ContentStyle="font-weight: bold">
                        @(LastTelemetryEnvironment?.RelativeHumidity?.ToString() ?? "-")%
                    </DescriptionsItem>

                    <DescriptionsItem Title="Pression atmosphérique" ContentStyle="font-weight: bold">
                        @(LastTelemetryEnvironment?.BarometricPressure?.ToString() ?? "-")hPa
                    </DescriptionsItem>
                </Descriptions>
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="12">
        <Card Title="Configuration">
            <ChildContent>
                <Descriptions Bordered="true" Column="1">
                    <DescriptionsItem Title="Bande" ContentStyle="font-weight: bold">
                        @(NodeInfo.RegionCode?.ToString() ?? "-")
                    </DescriptionsItem>

                    <DescriptionsItem Title="Profil de modulation" ContentStyle="font-weight: bold">
                        @(NodeInfo.ModemPreset?.ToString() ?? "-")
                    </DescriptionsItem>

                    <DescriptionsItem Title="Rôle" ContentStyle="font-weight: bold">
                        @(NodeInfo.Role?.ToString() ?? "-")
                    </DescriptionsItem>

                    <DescriptionsItem Title="Carte" ContentStyle="font-weight: bold">
                        @(NodeInfo.HardwareModel?.ToString() ?? "-")
                    </DescriptionsItem>

                    <DescriptionsItem Title="Version du Firmware" ContentStyle="font-weight: bold">
                        @(!string.IsNullOrWhiteSpace(NodeInfo.FirmwareVersion) ? NodeInfo.FirmwareVersion : "-")
                    </DescriptionsItem>
                </Descriptions>
                    
                @if (NodeInfo?.HardwareModel != null && NodeInfo?.HardwareModel.GetImageUrl() != "images/hardwares/gray.jpg")
                {
                    <div style="text-align: center">
                        <img height="150px" src="@NodeInfo?.HardwareModel.GetImageUrl()" alt="@NodeInfo?.HardwareModel" title="@NodeInfo?.HardwareModel" />
                    </div>
                }
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="8">
        <Card Title="10 derniers nœuds relais MQTT les plus lointains">
            <ChildContent>
                @if (NodeInfo?.PacketsFrom.Any() == true)
                {
                    <AntList DataSource="PacketsGateway" TItem="Packet">
                        <ChildContent Context="packet">
                            <ListItem>
                                <ListItemMeta>
                                    <AvatarTemplate>
                                        <Avatar Src="@packet.Gateway.HardwareModel.GetImageUrl()"></Avatar>
                                    </AvatarTemplate>
                                    <TitleTemplate>
                                        <a href="/node/@packet.Gateway.Id" target="_blank" rel="nofollow">@packet.Gateway.AllNames</a>
                                    </TitleTemplate>
                                    <DescriptionTemplate>
                                        <Tooltip Title="@("Paquet ID : " + packet.PacketId)">
                                            @if (packet.GatewayDistanceKm.HasValue)
                                            {
                                                <span>@(Math.Round(packet.GatewayDistanceKm.Value, 2)) Km</span>
                                                <span> | </span>
                                            }
                                            <Date Value="packet.CreatedAt"></Date>
                                        </Tooltip>
                                    </DescriptionTemplate>
                                </ListItemMeta>
                            </ListItem>
                        </ChildContent>
                    </AntList>
                }
                else
                {
                    <Empty></Empty>
                }
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="8">
        <Card Title="Voisins">
            <ChildContent>
                @if (NodeInfo?.MyNeighbors.Any() == true || NodeInfo?.NeighborsFor.Any() == true)
                {
                    if (NodeInfo?.MyNeighbors.Any() == true)
                    {
                        <AntList DataSource="@NodeInfo.MyNeighbors" TItem="NeighborInfo">
                            <ChildContent Context="neighbor">
                                <ListItem>
                                    <ListItemMeta>
                                        <AvatarTemplate>
                                            <Avatar Src="@neighbor.Neighbor.HardwareModel.GetImageUrl()"></Avatar>
                                        </AvatarTemplate>
                                        <TitleTemplate>
                                            <a href="/node/@neighbor.Neighbor.Id" target="_blank" rel="nofollow">@neighbor.Neighbor.AllNames</a>
                                        </TitleTemplate>
                                        <DescriptionTemplate>
                                            @if (neighbor.Distance.HasValue)
                                            {
                                                <span>@(Math.Round(neighbor.Distance.Value, 2)) Km | </span>
                                            }
                                            <span>SNR : @neighbor.Snr</span>
                                            <span> | </span>
                                            <Date Value="neighbor.UpdatedAt"></Date>
                                        </DescriptionTemplate>
                                    </ListItemMeta>
                                </ListItem>
                            </ChildContent>
                        </AntList>
                    }

                    @if (NodeInfo?.NeighborsFor.Any() == true)
                    {
                        <AntList DataSource="@NodeInfo.NeighborsFor" TItem="NeighborInfo">
                            <ChildContent Context="neighbor">
                                <ListItem>
                                    <ListItemMeta>
                                        <AvatarTemplate>
                                            <Avatar Src="@neighbor.Node.HardwareModel.GetImageUrl()"></Avatar>
                                        </AvatarTemplate>
                                        <TitleTemplate>
                                            <text>Voisin de : </text> <a href="/node/@neighbor.Node.Id" target="_blank" rel="nofollow">@neighbor.Node.AllNames</a>
                                        </TitleTemplate>
                                        <DescriptionTemplate>
                                            @if (neighbor.Distance.HasValue)
                                            {
                                                <span>@(Math.Round(neighbor.Distance.Value, 2)) Km | </span>
                                            }
                                            <span>SNR : @neighbor.Snr</span>
                                            <span> | </span>
                                            <Date Value="neighbor.UpdatedAt"></Date>
                                        </DescriptionTemplate>
                                    </ListItemMeta>
                                </ListItem>
                            </ChildContent>
                        </AntList>
                    }
                }
                else
                {
                    <Empty></Empty>
                }
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="8">
        <Card Title="Points d'intérêts">
            <ChildContent>
                @if (NodeInfo?.Waypoints.Any() == true)
                {
                    <AntList DataSource="@NodeInfo.Waypoints" TItem="Waypoint">
                        <ChildContent Context="waypoint">
                            <ListItem>
                                <ListItemMeta>
                                    <AvatarTemplate>
                                        <Avatar Src="@waypoint.Node.HardwareModel.GetImageUrl()"></Avatar>
                                    </AvatarTemplate>
                                    <TitleTemplate>
                                        @waypoint.Name @waypoint.Icon
                                    </TitleTemplate>
                                    <DescriptionTemplate>
                                        @if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                                        {
                                            @(Utils.CalculateDistance(NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value, waypoint.Latitude, waypoint.Longitude) + " Km")
                                        }
                                        @if (!string.IsNullOrWhiteSpace(waypoint.Description))
                                        {
                                            <span> | </span>
                                            @waypoint.Description
                                        }
                                        <span> | </span>
                                        <Date Value="waypoint.ExpiresAt"></Date>
                                    </DescriptionTemplate>
                                </ListItemMeta>
                            </ListItem>
                        </ChildContent>
                    </AntList>
                }
                else
                {
                    <Empty></Empty>
                }
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="12">
        <Card Title="Courbe d'utilisation sur l'air">
            <ChildContent>
                @if (DataAirUtil?.Any() == true)
                {
                    <AntDesign.Charts.Line Data="DataAirUtil" Config="_configAirUtilPercentage"/>
                }
                else
                {
                    <Empty></Empty>
                }
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="12">
        <Card Title="Courbe de la batterie">
            <ChildContent>
                @if (DataVoltageBattery?.Any() == true)
                {
                    <AntDesign.Charts.Line Data="DataVoltageBattery" Config="_configVoltageBattery"/>
                }
                else
                {
                    <Empty></Empty>
                }
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="12">
        <Card Title="Courbe de température et humidité">
            <ChildContent>
                @if (DataWeather?.Any() == true)
                {
                    <AntDesign.Charts.Line Data="DataWeather" Config="_configTemperature"/>
                }
                else
                {
                    <Empty></Empty>
                }
            </ChildContent>
        </Card>
    </GridCol>

    <GridCol Xs="24" Md="12">
        <Card Title="Courbe de pression atmosphérique">
            <ChildContent>
                @if (DataWeatherPressure?.Any() == true)
                {
                    <AntDesign.Charts.Line Data="DataWeatherPressure" Config="_configPressure"/>
                }
                else
                {
                    <Empty></Empty>
                }
            </ChildContent>
        </Card>
    </GridCol>
    </GridRow>
}

@code
{
    [Parameter]
    public required Context.Entities.Node? NodeInfo { get; set; }
    
    [Parameter]
    public NbPacketsMetrics? NbPackets { get; set; }

    private Telemetry? LastTelemetryDevice { get; set; }
    private Telemetry? LastTelemetryEnvironment { get; set; }
    
    private List<DateChartData<float>>? DataAirUtil { get; set; }
    private List<DateChartData<float>>? DataVoltageBattery { get; set; }
    private List<DateChartData<float>>? DataWeather { get; set; }
    private List<DateChartData<float>>? DataWeatherPressure { get; set; }
    private List<Packet> PacketsGateway { get; set; } = [];
    private bool HasRenderMapData { get; set; }
    private Osm? Map { get; set; }

    private readonly LineConfig _configAirUtilPercentage = Utils.GetLineConfig("Pourcentage (%)", 0, 100);
    private readonly LineConfig _configVoltageBattery = Utils.GetLineConfig("Tension (V)", 0, 5);
    private readonly LineConfig _configTemperature = Utils.GetLineConfig("Température (°C) / Humidité (%)", -10, 100);
    private readonly LineConfig _configPressure = Utils.GetLineConfig("Pression atmosphérique (hPa)", 950, 1050);
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Map != null && !HasRenderMapData && NodeInfo != null)
        {
            List<Osm.Marker> markers = [];
            List<Osm.Line> lines = [];
            
            if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
            {
                markers.Add(new Osm.Marker
                {
                    Id = $"node-{NodeInfo.Id}",
                    Latitude = NodeInfo.Latitude!.Value,
                    Longitude = NodeInfo.Longitude!.Value,
                    Color = "blue",
                    Label = NodeInfo.AllNames,
                    PopupOnHover = true
                });
            }

            if (NodeInfo.Positions.Any())
            {
                lines.Add(new Osm.Line
                {
                    Id = $"node-{NodeInfo.Id}-positions",
                    Points = NodeInfo.Positions
                        .Select(a => new[] { a.Latitude, a.Longitude })
                        .ToList(),
                    Color = Utils.Blue
                });
            }

            if (NodeInfo.PacketsFrom.Any())
            {
                var gateways = NodeInfo.PacketsFrom
                    .Where(p => p is { GatewayPosition: not null, Position: not null })
                    .GroupBy(p => p.GatewayPosition, (position, packets) => new
                    {
                        GatewayPosition = position,
                        packets.First().Gateway,
                        Packets = packets
                    })
                    .ToList();
                
                markers.AddRange(
                    gateways
                        .Select(p => new Osm.Marker
                        {
                            Id = $"node(gateway)-{p.Gateway.Id}-position-{p.GatewayPosition!.Id}",
                            Latitude = p.GatewayPosition.Latitude,
                            Longitude = p.GatewayPosition.Longitude,
                            Color = "green",
                            Label = $"Passerelle MQTT : {p.Gateway.AllNames}",
                            PopupOnHover = true,
                            Popup = $"<p>Passerelle MQTT : <a href=\"/node/{p.Gateway.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{p.Gateway.AllNames}</b></p>",
                            LinesOnHover = p.Packets.Select(pp => new Osm.Line
                            {
                                Id = $"node(gateway)-{p.Gateway.Id}->node-{NodeInfo.Id}",
                                Points =
                                [
                                    [pp.Position!.Latitude, pp.Position.Longitude],
                                    [pp.GatewayPosition!.Latitude, pp.GatewayPosition.Longitude]
                                ],
                                Color = Utils.Green,
                                Popup = $"<p><a href=\"/node/{NodeInfo.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{NodeInfo.AllNames}</b></a></p><p>Passerelle MQTT : <a href=\"/node/{p.Gateway.Id}\" target=\"_blank\"><b>{p.Gateway.AllNames}</b></a></p><p>Distance : {(pp.GatewayDistanceKm.HasValue ? Math.Round(pp.GatewayDistanceKm.Value, 2) : "-")} Km</p>"
                            }).ToList()
                        })
                );
            }

            if (NodeInfo.MyNeighbors.Any()) {
                if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                {
                    lines.AddRange(
                        NodeInfo.MyNeighbors
                            .Where(n => n.Neighbor is { Latitude: not null, Longitude: not null })
                            .Select(n => new Osm.Line
                            {
                                Id = $"node(neighbor)-{n.Node.Id}->node-{NodeInfo.Id}",
                                Points =
                                [
                                    [NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value],
                                    [n.Neighbor.Latitude!.Value, n.Neighbor.Longitude!.Value]
                                ],
                                Color = Utils.Red,
                                Popup = $"<p><a href=\"/node/{NodeInfo.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{NodeInfo.AllNames}</b></a></p><p>Voisin : <a href=\"/node/{n.Neighbor.Id}\" target=\"_blank\"><b>{n.Neighbor.AllNames}</b></a></p><p>Distance : {(n.Distance.HasValue ? Math.Round(n.Distance.Value, 2) : "-")} Km</p>"
                            })
                    );
                }
                    
                markers.AddRange(
                    NodeInfo.MyNeighbors
                        .Select(n => n.Neighbor)
                        .Where(n => n is { Latitude: not null, Longitude: not null })
                        .Select(n => new Osm.Marker
                        {
                            Id = $"node(neightbor)-{n.Id}",
                            Latitude = n.Latitude!.Value,
                            Longitude = n.Longitude!.Value,
                            Color = "red",
                            Label = $"Voisin : {n.AllNames}",
                            PopupOnHover = true,
                            Popup = $"<p>Voisin : <a href=\"/node/{n.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{n.AllNames}</b>"
                        })
                );
            }
                
            if (NodeInfo.NeighborsFor.Any()) {
                if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                {
                    lines.AddRange(
                        NodeInfo.NeighborsFor
                            .Where(n => n.Node is { Latitude: not null, Longitude: not null })
                            .Select(n => new Osm.Line
                            {
                                Id = $"node(neighbor)-{n.Node.Id}->node-{NodeInfo.Id}",
                                Points =
                                [
                                    [NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value],
                                    [n.Node.Latitude!.Value, n.Node.Longitude!.Value]
                                ],
                                Color = Utils.Red,
                                Popup = $"<p><a href=\"/node/{NodeInfo.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{NodeInfo.AllNames}</b></a></p><p>Voisin : <a href=\"/node/{n.Node.Id}\" target=\"_blank\"><b>{n.Node.AllNames}</b></a></p><p>Distance : {(n.Distance.HasValue ? Math.Round(n.Distance.Value, 2) : "-")} Km</p>"
                            })
                    );
                }
                    
                markers.AddRange(
                    NodeInfo.NeighborsFor
                        .Select(n => n.Node)
                        .Where(n => n is { Latitude: not null, Longitude: not null })
                        .Select(n => new Osm.Marker
                        {
                            Id = $"node(neightbor)-{n.Id}",
                            Latitude = n.Latitude!.Value,
                            Longitude = n.Longitude!.Value,
                            Color = "red",
                            Label = $"Voisin : {n.AllNames}",
                            PopupOnHover = true,
                            Popup = $"<p>Voisin : <a href=\"/node/{n.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{n.AllNames}</b>"
                        })
                );
            }

            if (NodeInfo.Waypoints.Any())
            {
                if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                {
                    lines.AddRange(
                        NodeInfo.Waypoints
                            .Select(n => new Osm.Line
                            {
                                Id = $"waypoint-{n.Id}->node-{NodeInfo.Id}",
                                Points =
                                [
                                    [NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value],
                                    [n.Latitude, n.Longitude]
                                ],
                                Color = Utils.Orange,
                                Popup = $"<p><a href=\"/node/{NodeInfo.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{NodeInfo.AllNames}</b></a></p><p>Point d'intérêt : <b>{n.Name}</b></p><p>{n.Description}</p><p>Distance : {Utils.CalculateDistance(NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value, n.Latitude, n.Longitude)} Km</p>"
                            })
                    );
                }
                    
                markers.AddRange(
                    NodeInfo.Waypoints
                        .Select(n => new Osm.Marker
                        {
                            Id = $"waypoint-{n.Id}",
                            Latitude = n.Latitude,
                            Longitude = n.Longitude,
                            Color = "orange",
                            Label = $"Point d'intérêt : {n.Name}",
                            PopupOnHover = true,
                            Popup = !string.IsNullOrWhiteSpace(n.Description) ? $"<p><b>{n.Name}</b></p><p>{n.Description}</p>" : null
                        })
                );
            }

            await Map.AddPolylines(lines);
            await Map.AddMarkers(markers);

            HasRenderMapData = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        LastTelemetryDevice = NodeInfo?.Telemetries.Where(t => t.Type == Meshtastic.Protobufs.Telemetry.VariantOneofCase.DeviceMetrics).MaxBy(a => a.CreatedAt);
        LastTelemetryEnvironment = NodeInfo?.Telemetries.Where(t => t.Type == Meshtastic.Protobufs.Telemetry.VariantOneofCase.EnvironmentMetrics).MaxBy(a => a.CreatedAt);
        
        DataAirUtil = NodeInfo?.Telemetries
            .Where(a => a.AirUtilTx > 0 || a.ChannelUtilization > 0)
            .SelectMany(a => new List<DateChartData<float>>
            {
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Utilisation du canal",
                    value = a.ChannelUtilization ?? 0
                },
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Emission sur l'air",
                    value = a.AirUtilTx ?? 0
                }
            }).ToList();
        
        DataVoltageBattery = NodeInfo?.Telemetries
            .Where(a => a.Voltage > 0)
            .Select(a => new DateChartData<float>
            {
                date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Batterie",
                value = a.Voltage ?? 0
            }).ToList();
        
        DataWeather = NodeInfo?.Telemetries
            .Where(a => a.Temperature > 0 || a.RelativeHumidity > 0)
            .SelectMany(a => new List<DateChartData<float>>
            {
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Humidité",
                    value = a.RelativeHumidity ?? 0
                },
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Température",
                    value = a.Temperature ?? 0
                }
            }).ToList();
        
        DataWeatherPressure = NodeInfo?.Telemetries
            .Where(a => a.BarometricPressure > 0)
            .Select(a => new DateChartData<float>
            {
                date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Pression",
                value = a.BarometricPressure ?? 0
            }).ToList();

        PacketsGateway = NodeInfo?.PacketsFrom?
            .GroupBy(a => a.Gateway, (node, packets) =>  packets.OrderByDescending(p => p.GatewayDistanceKm).ThenByDescending(p => p.UpdatedAt).First())
            .ToList() ?? [];
        
        base.OnParametersSet();
    }
    
    public class NbPacketsMetrics
    {
        public int Today { get; set; }
        public int Yesterday { get; set; }
        public int Total { get; set; }
    }
}