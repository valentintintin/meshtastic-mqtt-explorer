@using System.Globalization
@using MeshtasticMqttExplorer.Context.Entities
@using MeshtasticMqttExplorer.Extensions
@using MeshtasticMqttExplorer.Models
@using AntDesign
@using Meshtastic.Protobufs
@using MeshtasticMqttExplorer.Components.Shared
@using Telemetry = MeshtasticMqttExplorer.Context.Entities.Telemetry

@if (NodeInfo != null)
{
    <GridRow Gutter="(16, 16)" Justify="center">
        <GridCol Xs="24" Md="12">
            <Card Title="Activité">
                <ChildContent>
                    <Descriptions Bordered="true" Column="1">
                        <DescriptionsItem Title="Vu pour la dernière fois" ContentStyle="font-weight: bold">
                            <Date Value="NodeInfo.LastSeen" Fallback="-"></Date>
                        </DescriptionsItem>

                        <DescriptionsItem Title="Vu il y a" ContentStyle="font-weight: bold">
                            <TimeElapsed Value="@(DateTime.UtcNow - NodeInfo.LastSeen)" Fallback="-"></TimeElapsed>
                        </DescriptionsItem>
                    
                        <DescriptionsItem Title="Nombre de trames (aujourd'hui/hier/total)" ContentStyle="font-weight: bold">
                            @(NbPackets?.Today ?? 0)/@(NbPackets?.Yesterday ?? 0)/@(NbPackets?.Total ?? 0)
                            <a href="/node/@NodeInfo.Id/packets">Voir</a>
                        </DescriptionsItem>
                    
                        <DescriptionsItem Title="Passerelle MQTT ?" ContentStyle="font-weight: bold">
                            @(NodeInfo?.IsMqttGateway == true ? "Oui" : "Non")
                        </DescriptionsItem>
                    
                        <DescriptionsItem Title="Canal par défaut ?" ContentStyle="font-weight: bold">
                            @(NodeInfo?.HasDefaultChannel == true ? "Oui" : "Non")
                        </DescriptionsItem>
                    
                        <DescriptionsItem Title="Nombre de nœuds locaux entendus" ContentStyle="font-weight: bold">
                            @(NodeInfo?.NumOnlineLocalNodes ?? 0)
                        </DescriptionsItem>
                    </Descriptions>
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="12">
            <Card Title="Télémétrie">
                <ChildContent>
                    <Descriptions Bordered="true" Column="1">
                        <DescriptionsItem Title="Durée de fonctionnement" ContentStyle="font-weight: bold">
                            <TimeElapsed Value="LastTelemetryDevice?.Uptime" Fallback="-"></TimeElapsed>
                        </DescriptionsItem>

                        <DescriptionsItem Title="Utilisation du canal" ContentStyle="font-weight: bold">
                            @(LastTelemetryDevice?.ChannelUtilization?.ToString() ?? "-")%
                        </DescriptionsItem>

                        <DescriptionsItem Title="Emission sur l'air" ContentStyle="font-weight: bold">
                            @(LastTelemetryDevice?.AirUtilTx?.ToString() ?? "-")%
                        </DescriptionsItem>

                        <DescriptionsItem Title="Batterie" ContentStyle="font-weight: bold">
                            @(LastTelemetryDevice?.BatteryLevel?.ToString() ?? "-")% @(LastTelemetryDevice?.Voltage?.ToString() ?? "-")V
                        </DescriptionsItem>

                        <DescriptionsItem Title="Température" ContentStyle="font-weight: bold">
                            @(LastTelemetryEnvironment?.Temperature?.ToString() ?? "-")°C
                        </DescriptionsItem>

                        <DescriptionsItem Title="Humidité" ContentStyle="font-weight: bold">
                            @(LastTelemetryEnvironment?.RelativeHumidity?.ToString() ?? "-")%
                        </DescriptionsItem>

                        <DescriptionsItem Title="Pression atmosphérique" ContentStyle="font-weight: bold">
                            @(LastTelemetryEnvironment?.BarometricPressure?.ToString() ?? "-")hPa
                        </DescriptionsItem>
                    </Descriptions>
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="12">
            <Card Style="width:100%;" Title="Position">
                @if (NodeInfo?.Latitude.HasValue == true && NodeInfo?.Longitude.HasValue == true)
                {
                    <p>Altitude : <b>@(NodeInfo.Altitude?.ToString() ?? "-")m</b></p>
        
                    <Osm Latitude="NodeInfo.Latitude!.Value" Longitude="NodeInfo.Longitude!.Value" Zoom="13" @ref="Map"></Osm>
                }
                else
                {
                    <Empty></Empty>
                }
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="12">
            <Card Title="Configuration">
                <ChildContent>
                    <Descriptions Bordered="true" Column="1">
                        <DescriptionsItem Title="Bande" ContentStyle="font-weight: bold">
                            @(NodeInfo.RegionCode?.ToString() ?? "-")
                        </DescriptionsItem>

                        <DescriptionsItem Title="Profil de modulation" ContentStyle="font-weight: bold">
                            @(NodeInfo.ModemPreset?.ToString() ?? "-")
                        </DescriptionsItem>

                        <DescriptionsItem Title="Rôle" ContentStyle="font-weight: bold">
                            @(NodeInfo.Role?.ToString() ?? "-")
                        </DescriptionsItem>

                        <DescriptionsItem Title="Carte" ContentStyle="font-weight: bold">
                            @(NodeInfo.HardwareModel?.ToString() ?? "-")
                        </DescriptionsItem>

                        <DescriptionsItem Title="Version du Firmware" ContentStyle="font-weight: bold">
                            @(!string.IsNullOrWhiteSpace(NodeInfo.FirmwareVersion) ? NodeInfo.FirmwareVersion : "-")
                        </DescriptionsItem>
                    </Descriptions>
                    
                    @if (NodeInfo?.HardwareModel != null && NodeInfo?.HardwareModel.GetImageUrl() != "gray.jpg")
                    {
                        <div style="text-align: center">
                            <img height="150px" src="@NodeInfo?.HardwareModel.GetImageUrl()" alt="@NodeInfo?.HardwareModel.ToString()" title="@NodeInfo?.HardwareModel.ToString()" />
                        </div>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="8">
            <Card Title="10 derniers nœuds relais MQTT">
                <ChildContent>
                    @if (NodeInfo?.PacketsFrom.Any() == true)
                    {
                        @foreach (var grouped in NodeInfo?.PacketsFrom.GroupBy(a => a.Gateway, (node, packets) => new
                                  {
                                      node,
                                      packet = packets.OrderByDescending(p => p.CreatedAt).First()
                                  }) ?? [])
                        {
                            <Descriptions Bordered="true" Column="1">
                                <DescriptionsItem Title="Nom" ContentStyle="font-weight: bold">
                                    <a href="/node/@grouped.node.Id" target="_blank">@grouped.node.AllNames</a>
                                </DescriptionsItem>
                                
                                <DescriptionsItem Title="Date du dernier paquet" ContentStyle="font-weight: bold">
                                    <Date Value="grouped.packet.CreatedAt" />
                                </DescriptionsItem>
                                
                                <DescriptionsItem Title="Distance" ContentStyle="font-weight: bold">
                                    @if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue && grouped.node.Latitude.HasValue && grouped.node.Longitude.HasValue)
                                    {
                                    @(Utils.CalculateDistance(NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value, grouped.node.Latitude!.Value, grouped.node.Longitude!.Value) + " Km")
                                    }
                                    else
                                    {
                                    <text>-</text>
                                    }
                                </DescriptionsItem>
                            </Descriptions>
                        }
                    }
                    else
                    {
                        <Empty></Empty>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="8">
            <Card Title="Voisins">
                <ChildContent>
                    @if (NodeInfo?.MyNeighbors.Any() == true)
                    {
                    @foreach (var neighbor in NodeInfo?.MyNeighbors ?? [])
                    {
                    <Descriptions Bordered="true" Column="1">
                        <DescriptionsItem Title="Nœud" ContentStyle="font-weight: bold">
                            <a href="/node/@neighbor.NeighborId" target="_blank">@neighbor.Neighbor.AllNames</a>
                        </DescriptionsItem>

                        <DescriptionsItem Title="Vue le" ContentStyle="font-weight: bold">
                            <Date Value="neighbor.UpdatedAt"></Date>
                        </DescriptionsItem>

                        <DescriptionsItem Title="Distance" ContentStyle="font-weight: bold">
                            @if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue && neighbor.Neighbor.Latitude.HasValue && neighbor.Neighbor.Longitude.HasValue)
                            {
                                @(Utils.CalculateDistance(NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value, neighbor.Neighbor.Latitude!.Value, neighbor.Neighbor.Longitude!.Value) + " Km")
                            }
                            else
                            {
                                <text>-</text>
                            }
                        </DescriptionsItem>

                        <DescriptionsItem Title="SNR" ContentStyle="font-weight: bold">
                            @neighbor.Snr
                        </DescriptionsItem>
                    </Descriptions>
                    }
                    }
                    else
                    {
                    <Empty></Empty>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="8">
            <Card Title="Points d'intérêts">
                <ChildContent>
                    @if (NodeInfo?.Waypoints.Any() == true)
                    {
                        @foreach (var waypoint in NodeInfo?.Waypoints ?? [])
                        {
                            <Descriptions Bordered="true" Column="1">
                                <DescriptionsItem Title="Point" ContentStyle="font-weight: bold">
                                    @waypoint.Name @waypoint.Icon
                                    @if (!string.IsNullOrWhiteSpace(waypoint.Description))
                                    {
                                        @waypoint.Description
                                    }
                                </DescriptionsItem>

                                <DescriptionsItem Title="Expire le" ContentStyle="font-weight: bold">
                                    <Date Value="waypoint.ExpiresAt"></Date>
                                </DescriptionsItem>

                                <DescriptionsItem Title="Distance" ContentStyle="font-weight: bold">
                                    @if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                                    {
                                        @(Utils.CalculateDistance(NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value, waypoint.Latitude, waypoint.Longitude) + " Km")
                                    }
                                    else
                                    {
                                        <text>-</text>
                                    }
                                </DescriptionsItem>
                            </Descriptions>
                        }
                    }
                    else
                    {
                    <Empty></Empty>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="12">
            <Card Title="Courbe d'utilisation sur l'air">
                <ChildContent>
                    @if (DataAirUtil?.Any() == true)
                    {
                        <AntDesign.Charts.Line Data="DataAirUtil" Config="_configAirUtilPercentage"/>
                    }
                    else
                    {
                        <Empty></Empty>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="12">
            <Card Title="Courbe de la batterie">
                <ChildContent>
                    @if (DataVoltageBattery?.Any() == true)
                    {
                        <AntDesign.Charts.Line Data="DataVoltageBattery" Config="_configVoltageBattery"/>
                    }
                    else
                    {
                        <Empty></Empty>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="12">
            <Card Title="Courbe de température et humidité">
                <ChildContent>
                    @if (DataWeather?.Any() == true)
                    {
                        <AntDesign.Charts.Line Data="DataWeather" Config="_configTemperature"/>
                    }
                    else
                    {
                        <Empty></Empty>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Md="12">
            <Card Title="Courbe de pression atmosphérique">
                <ChildContent>
                    @if (DataWeatherPressure?.Any() == true)
                    {
                        <AntDesign.Charts.Line Data="DataWeatherPressure" Config="_configPressure"/>
                    }
                    else
                    {
                        <Empty></Empty>
                    }
                </ChildContent>
            </Card>
        </GridCol>
    </GridRow>
}

@code
{
    [Parameter]
    public required Context.Entities.Node? NodeInfo { get; set; }
    
    [Parameter]
    public NbPacketsMetrics? NbPackets { get; set; }

    private Telemetry? LastTelemetryDevice { get; set; }
    private Telemetry? LastTelemetryEnvironment { get; set; }
    
    private List<DateChartData<float>>? DataAirUtil { get; set; }
    private List<DateChartData<float>>? DataVoltageBattery { get; set; }
    private List<DateChartData<float>>? DataWeather { get; set; }
    private List<DateChartData<float>>? DataWeatherPressure { get; set; }
    private bool HasRenderMapData { get; set; }
    private Osm? Map { get; set; }
    
    private readonly LineConfig _configAirUtilPercentage = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(DateChartData<object>.date),
        YField = nameof(DateChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true
            },
            Title = new BaseAxisTitle
            {
                Text = "Pourcentage (%)",
                Visible = true
            },
            Min = 0,
            Max = 100,
            Visible = true,
        },
        Legend = new Legend
        {
            Visible = false
        },
        SeriesField = nameof(DateChartData<object>.type),
        Color = new [] { Utils.Blue, Utils.Red }
    };
    
    private readonly LineConfig _configVoltageBattery = new()
    {
        
        Padding = "auto",
        AutoFit = true,
        XField = nameof(DateChartData<object>.date),
        YField = nameof(DateChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true
            },
            Title = new BaseAxisTitle
            {
                Text = "Tension (V)",
                Visible = true
            },
            Min = 0,
            Max = 5,
            Visible = true,
        },
        Legend = new Legend
        {
            Visible = false
        },
        SeriesField = nameof(DateChartData<object>.type),
        Color = new [] { Utils.Blue }
    };
    
    private readonly LineConfig _configTemperature = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(DateChartData<object>.date),
        YField = nameof(DateChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true
            },
            Title = new BaseAxisTitle
            {
                Text = "Température (°C) / Humidité (%)"
            },
            Min = -10,
            Max = 100,
            Visible = true
        },
        Legend = new Legend
        {
            Position = "bottom"
        },
        SeriesField = nameof(DateChartData<object>.type),
        Color = new [] { Utils.Blue, Utils.Red }
    };
    
    private readonly LineConfig _configPressure = new()
    {
        Padding = "auto",
        AutoFit = true,
        XField = nameof(DateChartData<object>.date),
        YField = nameof(DateChartData<object>.value),
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel
            {
                Visible = true
            },
            Title = new BaseAxisTitle
            {
                Text = "Pression atmosphérique (hPa)"
            },
            Min = 950,
            Max = 1050,
            Visible = true
        },
        Legend = new Legend
        {
            Position = "bottom"
        },
        SeriesField = nameof(DateChartData<object>.type),
        Color = new [] { Utils.Blue }
    };
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Map != null && !HasRenderMapData && NodeInfo != null)
        {
            List<Osm.Marker> markers = [];
            List<Osm.Line> lines = [];
            
            if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
            {
                markers.Add(new Osm.Marker
                {
                    Id = NodeInfo.Id.ToString(),
                    Latitude = NodeInfo.Latitude!.Value,
                    Longitude = NodeInfo.Longitude!.Value,
                    Color = "blue",
                    Label = NodeInfo.AllNames
                });
            }

            if (NodeInfo.Positions.Any())
            {
                lines.Add(new Osm.Line
                {
                    Id = $"{NodeInfo.Id}-positions",
                    Points = NodeInfo.Positions
                        .Select(a => new[] { a.Latitude, a.Longitude })
                        .ToList(),
                    Color = Utils.Blue
                });
            }

            if (NodeInfo.PacketsFrom.Any())
            {
                var gateways = NodeInfo.PacketsFrom.GroupBy(a => a.Gateway)
                    .Select(n => n.Key)
                    .ToList();
                
                if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                {
                    lines.AddRange(
                        gateways
                            .Where(n => n is { Latitude: not null, Longitude: not null })
                            .Select(n => new Osm.Line
                            {
                                Id = $"gateway-{n.Id}",
                                Points =
                                [
                                    new[] { NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value },
                                    new[] { n.Latitude!.Value, n.Longitude!.Value }
                                ],
                                Color = Utils.Green
                            })
                    );
                }
                
                markers.AddRange(
                    gateways
                        .Where(n => n is { Latitude: not null, Longitude: not null })
                        .Select(n => new Osm.Marker
                        {
                            Id = n.Id.ToString(),
                            Latitude = n.Latitude!.Value,
                            Longitude = n.Longitude!.Value,
                            Color = "green",
                            Label = $"Passerelle MQTT : {n.AllNames}",
                            Popup = $"<p>Passerelle MQTT : <a href=\"/node/{n.Id}\" target=\"_blank\"><b>{n.AllNames}</b></p>"
                        })
                );
            }
                
            if (NodeInfo.MyNeighbors.Any()) {
                if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                {
                    lines.AddRange(
                        NodeInfo.MyNeighbors
                            .Select(n => n.Neighbor)
                            .Where(n => n is { Latitude: not null, Longitude: not null })
                            .Select(n => new Osm.Line
                            {
                                Id = $"neighbor-{n.Id}",
                                Points =
                                [
                                    new[] { NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value },
                                    new[] { n.Latitude!.Value, n.Longitude!.Value }
                                ],
                                Color = Utils.Red
                            })
                    );
                }
                    
                markers.AddRange(
                    NodeInfo.MyNeighbors
                        .Select(n => n.Neighbor)
                        .Where(n => n is { Latitude: not null, Longitude: not null })
                        .Select(n => new Osm.Marker
                        {
                            Id = n.Id.ToString(),
                            Latitude = n.Latitude!.Value,
                            Longitude = n.Longitude!.Value,
                            Color = "red",
                            Label = $"Voisin : {n.AllNames}",
                            Popup = $"<p>Voisin : <a href=\"/node/{n.Id}\" target=\"_blank\"><b>{n.AllNames}</b>"
                        })
                );
            }

            if (NodeInfo.Waypoints.Any())
            {
                if (NodeInfo.Latitude.HasValue && NodeInfo.Longitude.HasValue)
                {
                    lines.AddRange(
                        NodeInfo.Waypoints
                            .Select(n => new Osm.Line
                            {
                                Id = $"waypoint-{n.Id}",
                                Points =
                                [
                                    new[] { NodeInfo.Latitude!.Value, NodeInfo.Longitude!.Value },
                                    new[] { n.Latitude, n.Longitude }
                                ],
                                Color = Utils.Orange
                            })
                    );
                }
                    
                markers.AddRange(
                    NodeInfo.Waypoints
                        .Select(n => new Osm.Marker
                        {
                            Id = n.Id.ToString(),
                            Latitude = n.Latitude,
                            Longitude = n.Longitude,
                            Color = "orange",
                            Label = $"Point d'intérêt : {n.Name}",
                            Popup = !string.IsNullOrWhiteSpace(n.Description) ? $"<p><b>{n.Name}</b></p><p>{n.Description}</p>" : null
                        })
                );
            }

            await Map.AddPolylines(lines);
            await Map.AddMarkers(markers);

            HasRenderMapData = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        LastTelemetryDevice = NodeInfo?.Telemetries.Where(t => t.Type == Meshtastic.Protobufs.Telemetry.VariantOneofCase.DeviceMetrics).MaxBy(a => a.CreatedAt);
        LastTelemetryEnvironment = NodeInfo?.Telemetries.Where(t => t.Type == Meshtastic.Protobufs.Telemetry.VariantOneofCase.EnvironmentMetrics).MaxBy(a => a.CreatedAt);
        
        DataAirUtil = NodeInfo?.Telemetries
            .Where(a => a.AirUtilTx > 0 || a.ChannelUtilization > 0)
            .SelectMany(a => new List<DateChartData<float>>
            {
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Utilisation du canal",
                    value = a.ChannelUtilization ?? 0
                },
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Emission sur l'air",
                    value = a.AirUtilTx ?? 0
                }
            }).ToList();
        
        DataVoltageBattery = NodeInfo?.Telemetries
            .Where(a => a.Voltage > 0)
            .Select(a => new DateChartData<float>
            {
                date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Batterie",
                value = a.Voltage ?? 0
            }).ToList();
        
        DataWeather = NodeInfo?.Telemetries
            .Where(a => a.Temperature > 0 || a.RelativeHumidity > 0)
            .SelectMany(a => new List<DateChartData<float>>
            {
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Humidité",
                    value = a.RelativeHumidity ?? 0
                },
                new()
                {
                    date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                    type = "Température",
                    value = a.Temperature ?? 0
                }
            }).ToList();
        
        DataWeatherPressure = NodeInfo?.Telemetries
            .Where(a => a.BarometricPressure > 0)
            .Select(a => new DateChartData<float>
            {
                date = a.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture),
                type = "Pression",
                value = a.BarometricPressure ?? 0
            }).ToList();
        
        base.OnParametersSet();
    }
    
    public class NbPacketsMetrics
    {
        public int Today { get; set; }
        public int Yesterday { get; set; }
        public int Total { get; set; }
    }
}