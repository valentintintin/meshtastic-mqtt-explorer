@implements IAsyncDisposable

@inject IJSRuntime JSRuntime

<div style="position: relative">
    <div id="map" style="@("height: " + Height)"></div>
</div>

@code
{
    [Parameter] 
    public string Height { get; set; } = "500px";
    
    [Parameter]
    public double Latitude { get; set; }
    
    [Parameter]
    public double Longitude { get; set; }

    [Parameter]
    public int Zoom { get; set; } = 13;

    [Parameter]
    public Marker? OneMarker { get; set; }

    private TaskCompletionSource<bool> _mapInitialized = new();
    
    public async Task AddMarker(Marker marker)
    {
        await _mapInitialized.Task;
        
        await JSRuntime.InvokeVoidAsync("addMarkerToMap", marker);
    }
    
    public async Task AddMarkers(List<Marker> markers)
    {
        if (!markers.Any())
        {
            return;
        }
        
        await _mapInitialized.Task;

        await JSRuntime.InvokeVoidAsync("addMarkersToMap", markers);
    }

    public async Task AddPolyline(Line line)
    {
        await _mapInitialized.Task;

        await JSRuntime.InvokeVoidAsync("addPolylineToMap", line);
    }

    public async Task AddPolylines(List<Line> lines)
    {
        await _mapInitialized.Task;

        await JSRuntime.InvokeVoidAsync("addPolylinesToMap", lines);
    }

    public async Task ClearMarkers()
    {
        await _mapInitialized.Task;

        await JSRuntime.InvokeVoidAsync("clearMarkersMap");
    }

    public async Task Reload()
    {
        await DeInit();
        await Init();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Init();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Init()
    {
        await JSRuntime.InvokeVoidAsync("initializeLeafletMap", new[] { Latitude, Longitude }, Zoom);
        _mapInitialized.SetResult(true);

        if (OneMarker != null)
        {
            await AddMarker(OneMarker);
        }
    }

    private async Task DeInit()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("disposeLeafletMap");
        }
        catch (Exception)
        {
            // Ignore
        }
        finally
        {
            _mapInitialized = new TaskCompletionSource<bool>();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await DeInit();
    }

    public class Marker
    {
        public required string Id { get; set; }
        public required double Latitude { get; set; }
        public required double Longitude { get; set; }
        public IconType IconType { get; set; } = IconType.Classic;
        public string? Label { get; set; }
        public string? Popup { get; set; }
        public string? Color { get; set; }
        public string? FillColor { get; set; }
        public float? Opacity { get; set; }
        public bool PopupOnHover { get; set; }
        public List<Line>? LinesOnHover { get; set; }
    }
    
    public class Line
    {
        public required string Id { get; set; }
        public required List<double[]> Points { get; set; }
        public string? Color { get; set; }
        public string? Popup { get; set; }
    }
    
    public enum IconType
    {
        Classic,
        Circle,
        Square,
    }
}
