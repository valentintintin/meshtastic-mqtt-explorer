@page "/send"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text
@using Common.Context.Entities
@using Common.Exceptions
@using Common.Extensions
@using Common.Models
@using Common.Services
@using Google.Protobuf
@using Meshtastic.Protobufs

@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration
@inject MqttClientService MqttClientService
@inject HttpClientService HttpClientService
@inject IMessageService Message
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Envoi d'une trame</PageTitle>

<PageHeader Title="Envoi d'une trame"></PageHeader>

@if (!_allowed)
{
    <Result Title="Fonctionnalité désactivée" Status="ResultStatus.Http403"></Result>
}
else
{
    <Form Model="@_model"
          OnFinish="OnFinish"
          LabelColSpan="8"
          WrapperColSpan="16">

        <Collapse DefaultActiveKey="@(new[] { "1" })" Accordion>
            <Panel Header="Informations de base" Key="1">
                <FormItem Label="Mon Id">
                    <Input @bind-Value="@context.NodeFromId" MaxLength="9"/>
                </FormItem>
                <FormItem Label="Id destinataire">
                    <Input @bind-Value="@context.NodeToId" MaxLength="9" />
                </FormItem>
                <FormItem Label="Canal">
                    <Input @bind-Value="@context.Channel"/>
                </FormItem>
                <FormItem Label="Serveur MQTT">
                    <Select DataSource="@DeviceConnections"
                            @bind-Value="@context.MqttServerId"
                            ItemValue="c => c.MqttServer.Id"
                            ItemLabel="c => c.MqttServer.Name"
                            Style="width:120px">
                    </Select>
                </FormItem>
            </Panel>
            <Panel Header="Données" Key="2">
                <Tabs Type="@TabType.Card" @bind-ActiveKey="@context.Type">
                    <TabPane Tab="Message" Key="@SentPacketDto.MessageType.Message.ToString()">
                        <FormItem Label="Message">
                            <TextArea ShowCount MaxLength="200" @bind-Value="@context.Message"></TextArea>
                        </FormItem>
                    </TabPane>
                    <TabPane Tab="NodeInfo" Key="@SentPacketDto.MessageType.NodeInfo.ToString()">
                        <FormItem Label="Nom long (max 37)">
                            <Input @bind-Value="@context.Name" MaxLength="37" />
                        </FormItem>
                        <FormItem Label="Nom court (max 4)">
                            <Input @bind-Value="@context.ShortName" MaxLength="4" />
                        </FormItem>
                    </TabPane>
                    <TabPane Tab="Position" Key="@SentPacketDto.MessageType.Position.ToString()">
                        <FormItem Label="Latitude">
                            <AntDesign.InputNumber Width="150" TValue="double" Step="0.0001" @bind-Value="@context.Latitude"/>
                        </FormItem>
                        <FormItem Label="Longitude">
                            <AntDesign.InputNumber Width="150" TValue="double" Step="0.0001" @bind-Value="@context.Longitude"/>
                        </FormItem>
                        <FormItem Label="Altitude">
                            <AntDesign.InputNumber Width="150" TValue="int" Max="5000" @bind-Value="@context.Altitude" Formatter="FormatM" Parser="ParseM" />
                        </FormItem>
                    </TabPane>
                    <TabPane Tab="Point d'intérêt" Key="@SentPacketDto.MessageType.Waypoint.ToString()">
                        <FormItem Label="Nom (max 30)">
                            <Input @bind-Value="@context.Name" MaxLength="30" />
                        </FormItem>
                        <FormItem Label="Description">
                            <TextArea ShowCount MaxLength="100" @bind-Value="@context.Description"></TextArea>
                        </FormItem>
                        <FormItem Label="Date d'expiration (UTC)">
                            <DatePicker TValue="DateTime" AllowClear="false" ShowTime="true" @bind-Value="@context.Expires" DisabledDate="date => date < DateTime.UtcNow"/>
                        </FormItem>
                        <FormItem Label="Latitude">
                            <AntDesign.InputNumber Width="150" TValue="double" Step="0.0001" @bind-Value="@context.Latitude"/>
                        </FormItem>
                        <FormItem Label="Longitude">
                            <AntDesign.InputNumber Width="150" TValue="double" Step="0.0001" @bind-Value="@context.Longitude"/>
                        </FormItem>
                        <FormItem Label="Id (optionnel)">
                            <AntDesign.InputNumber Width="150" TValue="uint?" Min="0" Max="MeshtasticService.NodeBroadcast" @bind-Value="@context.Id"/>
                        </FormItem>
                    </TabPane>
                    <TabPane Tab="Brut" Key="@SentPacketDto.MessageType.Raw.ToString()">
                        <FormItem Label="Port num">
                            <Select DataSource="@Utils.PortNumFilters"
                                    @bind-Value="@context.PortNum"
                                    ItemValue="c=>c.Value"
                                    ItemLabel="c=>c.Value?.ToString()">
                            </Select>
                        </FormItem>
                        <FormItem Label="Payload en base64">
                            <TextArea @bind-Value="@context.RawBase64"></TextArea>
                        </FormItem>
                    </TabPane>
                </Tabs>
            </Panel>
            <Panel Header="Avancé" Key="10">
                <FormItem Label="Clé de chiffrement (base64, vide pour ne pas chiffrer)">
                    <Input @bind-Value="@context.Key" />
                </FormItem>
                <FormItem Label="Nombre de sauts">
                    <AntDesign.InputNumber Min="0" Max="7" @bind-Value="@context.HopLimit" TValue="uint"/>
                </FormItem>
                <FormItem Label="Avec accusé de réception">
                    <Checkbox @bind-Value="@context.WantAck"></Checkbox>
                </FormItem>
                <FormItem Label="Topic racine MQTT">
                    <Input @bind-Value="@context.RootTopic"/>
                </FormItem>
            </Panel>
        </Collapse>

        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Envoyer
            </Button>
        </FormItem>
    </Form>
}

@code
{
    private bool _allowed;
    private SentPacketDto _model = null!;
    private List<DeviceConnection> DeviceConnections { get; set; } = [];

    protected override void OnInitialized()
    {
        _allowed = Configuration.GetValue("AllowSend", true);

        DeviceConnections = MqttClientService.MqttClientAndConfigurations
            .Cast<DeviceConnection>()
            .Concat(HttpClientService.HttpClientAndConfigurations)
            .ToList();
        
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _model = await LocalStorage.GetItemAsync<SentPacketDto>("lastSentDto") ?? new SentPacketDto();
            
            var deviceConnection = DeviceConnections.FirstOrDefault();

            if (deviceConnection == null)
            {
                _allowed = false;
            }
            else
            {
                _model.MqttServerId = deviceConnection.MqttServer.Id;
            }

            await InvokeAsync(StateHasChanged);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnFinish(EditContext editContext)
    {
        try
        {
            try
            {
                await MqttClientService.PublishMessage(_model);
            }
            catch (NotFoundException<MqttServer>)
            {
                await HttpClientService.PublishMessage(_model);
            }
            
            await Message.Success("Trame bien envoyée !");
            await LocalStorage.SetItemAsync("lastSentDto", _model);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await Message.Error($"Il y a eu une erreur pendant l'envoi : {e.Message}");
        }
    }
    
    private string FormatM(int value)
    {
        return value + " m";
    }

    private string ParseM(string value)
    {
        return value.Replace(" m", "");
    }
}