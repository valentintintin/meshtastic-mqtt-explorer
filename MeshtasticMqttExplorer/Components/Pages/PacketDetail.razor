@page "/packet/{id:long}"
@page "/packet/by-packetid/{packetId:long}"

@implements IAsyncDisposable

@using System.Globalization
@using MeshtasticMqttExplorer.Context
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Components.Shared
@using MeshtasticMqttExplorer.Extensions
@using MeshtasticMqttExplorer.Extensions.Entities

@inject IDbContextFactory<DataContext> ContextFactory

<PageTitle>Détail du packet @Packet?.PacketId</PageTitle>

<Spin Spinning="Loading">
    @if (Packet != null)
    {
        <PageHeader Title="@($"Trame #{Packet?.PacketId} {Packet?.PortNum} du noeud {Packet?.From.NodeIdString} pour {Packet?.To.NodeIdString}")" 
                    Subtitle="@Packet?.CreatedAt.ToFrench().ToString(CultureInfo.CurrentCulture)"></PageHeader>

        <Timeline>
            <TimelineItem Color="blue">
                <a href="/node/@Packet.FromId" target="_blank" rel="nofollow">@Packet.From.AllNames (Expéditeur)</a>
            </TimelineItem>
            <TimelineItem Color="green">
                <a href="/node/@Packet.GatewayId" target="_blank" rel="nofollow">@Packet.Gateway.AllNames (Passerelle)</a>
                <br />
                Distance de <b>@Packet.GatewayDistanceKm Km</b> - SNR <b>@Packet.RxSnr</b>
            </TimelineItem>
            <TimelineItem Color="red">
                <a href="/node/@Packet.ToId" target="_blank" rel="nofollow">@Packet.To.AllNames (Destinataire)</a>
            </TimelineItem>
        </Timeline>
        
        @if (Packet.PacketDuplicated != null)
        {
            <p>
                <text>Doublon avec </text><a href="/packet/@Packet.PacketDuplicatedId" target="_blank" rel="nofollow">@Packet.PacketDuplicated.PacketId</a>
            </p>
        }
        
        <PacketPayload Packet="Packet" ShowJson="true"></PacketPayload>
    }
    else if (Loading)
    {
        <Skeleton></Skeleton>
    }
    else
    {
        <Result Title="Paquet introuvable" Status="404"></Result>
    }
</Spin>

@code
{
    [Parameter]
    public long? Id { get; set; }
    
    [Parameter]
    public long? PacketId { get; set; }

    private bool Loading { get; set; } = true;
    private Context.Entities.Packet? Packet { get; set; }
    private DataContext Context { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();

        await FetchData();

        await base.OnInitializedAsync();
    }

    private async Task FetchData()
    {
        Loading = true;
        
        var query = Context.Packets
            .Include(n => n.From)
            .Include(n => n.To)
            .Include(n => n.Gateway)
        ;

        if (Id.HasValue)
        {
            Packet = await query.FindByIdAsync(Id);
        }
        else if (PacketId != 0 && PacketId.HasValue)
        {
            Packet = await query.FindByPacketIdAsync((uint) PacketId.Value);
        }

        if (Packet == null)
        {
            Loading = false;

            return;
        }
        
        Loading = false;
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}