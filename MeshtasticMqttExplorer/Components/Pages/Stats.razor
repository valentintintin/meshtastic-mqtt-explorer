@page "/stats"
@implements IAsyncDisposable

@using Common.Context
@using Common.Context.Entities
@using Common.Extensions
@using Common.Services
@using Meshtastic.Protobufs
@using MeshtasticMqttExplorer.Models
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<DataContext> ContextFactory;
@inject IConfiguration Configuration;

<PageTitle>Statistiques</PageTitle>

<PageHeader Title="Statistiques">
    <SubtitleTemplate>Depuis le @MinDate.ToFrench()</SubtitleTemplate>
    <PageHeaderContent>
        <Switch @bind-Checked="ShowOnlyRouterAccepted" Disabled="@Loading" UnCheckedChildren="Compter toutes les trames" CheckedChildren="Compter les trames autorisées uniquement" OnChange="value => SetShowOnlyRouterAccepted(value)"/>
        @if (ShowOnlyRouterAccepted)
        {
            @* <Switch @bind-Checked="IncludeOnlyBroadcast" Disabled="@Loading" UnCheckedChildren="Inclure les trames avec destinataire" CheckedChildren="Inclure les trames broadcast uniquement" OnChange="value => SetIncludeOnlyBroadcast(value)"/> *@
        }
    </PageHeaderContent>
    <PageHeaderExtra>
        <Button Disabled="@Loading" OnClick="FetchData">Actualiser</Button>
    </PageHeaderExtra>
</PageHeader>

<Spin Spinning="Loading">
    <GridRow Gutter="(16, 16)" Justify="RowJustify.Center">
        <GridCol Xs="24" Lg="2">
            <Card Title="Noeuds">
                <Statistic Value="@NbNodes"/>
            </Card>
        </GridCol>
        
        <GridCol Xs="24" Lg="4">
            <Card Title="Noeuds actifs sur 1h">
                <Statistic Value="@NbNodesLastHour" />
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="4">
            <Card Title="Paquets aujourd'hui">
                <Statistic Value="@NbPacketsSent"/>
            </Card>
        </GridCol>
        
        <GridCol Xs="24" Lg="3">
            <Card Title="Paquets / minutes">
                <Statistic Value="@NbPacketsSentMinutes" Precision="1" />
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="4">
            <Card Title="Utilisation canal sur 1h">
                <Statistic Value="@AvgChannelUtilization" Suffix="%" Precision="2" />
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="3">
            <Card Title="TX moyen sur 1h">
                <Statistic Value="@AvgAirUtilTx" Suffix="%" Precision="2" />
            </Card>
        </GridCol>
    </GridRow>
    
    <Divider></Divider>
    
    <GridRow Gutter="(16, 16)" Justify="RowJustify.Center">
        @* <GridCol Xs="24" Lg="12"> *@
        @*     <Card Title="Type de paquet (hors chiffrés)"> *@
        @*         <ChildContent> *@
        @*             @if (Loading) *@
        @*             { *@
        @*                 <Skeleton></Skeleton> *@
        @*             } *@
        @*             else *@
        @*             { *@
        @*                 <AntDesign.Charts.Column Data="DataPacketTypes" Config="_configBarType"/> *@
        @*             } *@
        @*         </ChildContent> *@
        @*     </Card> *@
        @* </GridCol> *@

        <GridCol Xs="24" Lg="12">
            <Card Title="Type de paquets envoyés aujourd'hui">
                <ChildContent>
                    @if (Loading)
                    {
                        <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataPaquetsTypes" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="12">
            <Card Title="Saut paramétré">
                <ChildContent>
                    @if (Loading)
                    {
                        <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataHops" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>
        
        <GridCol Xs="24" Lg="12">
            <Card Title="Profil de modulation">
                <ChildContent>
                    @if (Loading)
                    {
                        <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataProfileTypes" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>
        
        <GridCol Xs="24" Lg="12">
            <Card Title="Type de carte">
                <ChildContent>
                    @if (Loading)
                    {
                        <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataHardwareTypes" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="12">
            <Card Title="Type de nœud">
                <ChildContent>
                    @if (Loading)
                    {
                        <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataNodeTypes" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="12">
            <Card Title="Versions de firmware installées">
                <ChildContent>
                    @if (Loading)
                    {
                        <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataFirmwareVersions" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>
    </GridRow>
    
    <Divider></Divider>

    <Card Title="Paquets boradcast par serveur MQTT, Bande, nœud et type hier">
        <ChildContent>
            <Table TItem="PacketNodeType" DataSource="DataYesterdayNodePackets" Loading="Loading" Responsive>
                <PropertyColumn Property="c => c.MqttServerId" Title="Serveur MQTT" Filters="Utils.MqttServerFilters">
                    @context.MqttServerName
                </PropertyColumn>

                <PropertyColumn Property="c => c.RegionCode" Title="Bande" Filters="Utils.RegionCodeFilters">
                    @context.RegionCode
                </PropertyColumn>

                <PropertyColumn Property="c => c.NodeName" Title="Nœud" Filterable>
                    <a href="/node/@context.NodeId" target="_blank" rel="nofollow">@context.NodeName</a>
                </PropertyColumn>

                <PropertyColumn Property="c => c.PortNum" Title="Type" Filters="Utils.PortNumFilters">
                    @(context.PortNum?.ToString() ?? "Chiffrées")
                </PropertyColumn>

                <PropertyColumn Property="c => c.Nb" Title="Nombre" Sortable SortDirections="new [] { SortDirection.Ascending, SortDirection.Descending }" DefaultSortOrder="SortDirection.Descending">
                    <a href="/node/@context.NodeId/packets" target="_blank" rel="nofollow">@context.Nb</a>
                </PropertyColumn>
            </Table>
        </ChildContent>
    </Card>
</Spin>

@code
{
    private DateTime MinDate { get; set; } = DateTime.UtcNow;
    private bool Loading { get; set; } = true;
    private bool ShowOnlyRouterAccepted { get; set; }
    private DataContext Context { get; set; } = null!;
    private int NbNodes { get; set; }
    private int NbNodesLastHour { get; set; }
    private int NbPacketsSent { get; set; }
    private double NbPacketsSentMinutes { get; set; }
    private float? AvgAirUtilTx { get; set; }
    private float? AvgChannelUtilization { get; set; }
    private List<ChartData<int>> DataProfileTypes { get; set; } = [];
    private List<ChartData<int>> DataPaquetsTypes { get; set; } = [];
    private List<ChartData<int>> DataHops { get; set; } = [];
    private List<ChartData<int>> DataHardwareTypes { get; set; } = [];
    private List<ChartData<int>> DataNodeTypes { get; set; } = [];
    private List<ChartData<int>> DataFirmwareVersions { get; set; } = [];
    private List<PacketNodeType> DataYesterdayNodePackets { get; set; } = [];
    
    private readonly PieConfig _configPieType = new()
    {
        AngleField = "value",
        ColorField = "type",
        Label = new PieLabelConfig
        {
            Style = new TextStyle
            {
                FontSize = 20,
                Fill = "black",
                Stroke = "white",
            }
        },
    };
    
    // private readonly ColumnConfig _configBarType = new()
    // {
    //     XField = "type",
    //     YField = "value",
    //     Meta = new
    //     {
    //         Type = new
    //         {
    //             Alias = "Donnée",
    //         },
    //         Value = new
    //         {
    //             Alias = "Nombre",
    //         },
    //     },
    // };
    
    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();
        
        MinDate = DateTime.Today.ToUniversalTime().AddDays(-7);

        await FetchData();
        
        await base.OnInitializedAsync();
    }

    private async Task FetchData()
    {
        Loading = true;

        var today = DateTime.UtcNow.Date;
        var yesterday = today.AddDays(-1);
        var oneHour = DateTime.UtcNow.AddHours(-1);

        NbNodes = await Context.Nodes
            .Where(n => n.LastSeen > MinDate)
            .AsNoTrackingWithIdentityResolution()
            .CountAsync();

        NbNodesLastHour = await Context.Nodes
            .Where(n => n.LastSeen >= oneHour)
            .AsNoTrackingWithIdentityResolution()
            .CountAsync();

        AvgAirUtilTx = await Context.Nodes
            .Where(n => n.LastSeen >= oneHour)
            .Include(n => n.Telemetries
                .Where(t => t.AirUtilTx != null)
                .OrderByDescending(t => t.UpdatedAt)
                .Take(1)
            )
            .Where(n => n.Telemetries.Any())
            .AsNoTrackingWithIdentityResolution()
            .AverageAsync(n => n.Telemetries.First().AirUtilTx);

        AvgChannelUtilization = await Context.Nodes
            .Where(n => n.LastSeen >= oneHour)
            .Include(n => n.Telemetries
                .Where(t => t.ChannelUtilization != null)
                .OrderByDescending(t => t.UpdatedAt)
                .Take(1)
            )
            .Where(n => n.Telemetries.Any())
            .AsNoTrackingWithIdentityResolution()
            .AverageAsync(n => n.Telemetries.First().ChannelUtilization);
        
        DataNodeTypes = await Context.Nodes
            .Where(a => a.Role.HasValue)
            .Where(n => n.LastSeen > MinDate)
            .GroupBy(a => a.Role, (role, nodes) => new ChartData<int>
            {
                type = role.ToString()!,
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();

        DataHops = await Context.Nodes
            .Where(a => a.HopStart.HasValue)
            .Where(n => n.LastSeen > MinDate)
            .GroupBy(a => a.HopStart, (hops, nodes) => new ChartData<int>
            {
                type = $"{hops.ToString()!} sauts",
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .Take(10)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        
        DataHardwareTypes = await Context.Nodes
            .Where(a => a.HardwareModel.HasValue)
            .Where(n => n.LastSeen > MinDate)
            .GroupBy(a => a.HardwareModel, (hardwareModel, nodes) => new ChartData<int>
            {
                type = hardwareModel.ToString()!,
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        
        DataProfileTypes = await Context.Nodes
            .Where(n => n.LastSeen > MinDate)
            .Where(a => a.RegionCode.HasValue && a.ModemPreset.HasValue)
            .GroupBy(a => new
            {
                a.RegionCode,
                a.ModemPreset
            }, (profile, nodes) => new ChartData<int>
            {
                type = $"{profile.RegionCode} {profile.ModemPreset}",
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        
        DataFirmwareVersions = await Context.Nodes
            .Where(n => n.LastSeen > MinDate)
            .Where(a => !string.IsNullOrWhiteSpace(a.FirmwareVersion))
            .GroupBy(a => a.FirmwareVersion, (version, nodes) => new ChartData<int>
            {
                type = version ?? "",
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();

        NbPacketsSent = await Context.Packets
            .Where(n => n.CreatedAt >= today)
            .Where(n => n.PortNum != PortNum.MapReportApp && n.PacketDuplicatedId == null)
            .Where(n => !ShowOnlyRouterAccepted || (n.PacketActivity != null && n.PacketActivity.HopLimit > 0))
            .AsNoTrackingWithIdentityResolution()
            .CountAsync();

        NbPacketsSentMinutes = NbPacketsSent / (DateTime.UtcNow - today).TotalMinutes;

        DataPaquetsTypes = await Context.Packets
            .Where(n => n.CreatedAt >= today)
            .Where(a => a.PortNum != PortNum.MapReportApp && a.PacketDuplicatedId == null)
            .Where(n => !ShowOnlyRouterAccepted || (n.PacketActivity != null && n.PacketActivity.HopLimit > 0))
            .GroupBy(a => a.PortNum, (portNum, packets) => new ChartData<int>
            {
                type = portNum.ToString()!,
                value = packets.Count()
            })
            .OrderByDescending(v => v.value)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        
        DataYesterdayNodePackets = await Context.Packets
            .Include(a => a.MqttServer)
            .Where(a => a.To.NodeId == MeshtasticService.NodeBroadcast && a.PortNum != PortNum.RoutingApp && a.PortNum != PortNum.TextMessageApp && a.PortNum != PortNum.MapReportApp && a.PacketDuplicated == null)
            .Where(a => a.CreatedAt.Date == yesterday)
            .Where(a => a.MqttServer != null)
            .Where(n => !ShowOnlyRouterAccepted || (n.PacketActivity != null && n.PacketActivity.HopLimit > 0))
            .GroupBy(a => new
            {
                MqttServerId = a.MqttServer!.Id,
                MqttServerName = a.MqttServer.Name,
                a.From.RegionCode,
                NodeId = a.From.Id,
                NodeName = a.From.AllNames,
                a.PortNum
            }, (grouped, packets) => new PacketNodeType
            {
                MqttServerId = grouped.MqttServerId,
                MqttServerName = grouped.MqttServerName,
                RegionCode = grouped.RegionCode,
                NodeId = grouped.NodeId,
                NodeName = grouped.NodeName!,
                PortNum = grouped.PortNum,
                Nb = packets.Count()
            })
            .OrderByDescending(v => v.Nb)
            .Take(100)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        
        Loading = false;
    }
    
    private async Task SetShowOnlyRouterAccepted(bool showOnlyRouterAccepted)
    {
        await FetchData();
    }
    
    private async Task SetIncludeOnlyBroadcast(bool showOnlyRouterAccepted)
    {
        await FetchData();
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}