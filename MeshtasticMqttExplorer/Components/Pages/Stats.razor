@page "/stats"
@implements IAsyncDisposable

@using Meshtastic.Protobufs
@using MeshtasticMqttExplorer.Context
@using MeshtasticMqttExplorer.Context.Entities
@using MeshtasticMqttExplorer.Models
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<DataContext> ContextFactory;

<PageTitle>Statistiques</PageTitle>

<PageHeader Title="Statistiques" />

<Spin Spinning="Loading">
    <GridRow Gutter="(16, 16)" Justify="center">
        @* <GridCol Xs="24" Lg="12"> *@
        @*     <Card Title="Type de paquet (hors chiffrés)"> *@
        @*         <ChildContent> *@
        @*             @if (Loading) *@
        @*             { *@
        @*                 <Skeleton></Skeleton> *@
        @*             } *@
        @*             else *@
        @*             { *@
        @*                 <AntDesign.Charts.Column Data="DataPacketTypes" Config="_configBarType"/> *@
        @*             } *@
        @*         </ChildContent> *@
        @*     </Card> *@
        @* </GridCol> *@
        
        <GridCol Xs="24" Lg="12">
            <Card Title="Paquets par serveur MQTT, Bande, nœud et type pour depuis hier">
                <ChildContent>
                    <Table TItem="PacketNodeType" DataSource="DataYesterdayNodePackets" Loading="Loading" Responsive>
                        <PropertyColumn Property="c => c.MqttServer" Title="Serveur MQTT" Filters="Utils.MqttServerFilters">
                            @context.MqttServer
                        </PropertyColumn>

                        <PropertyColumn Property="c => c.RegionCode" Title="Bande" Filters="Utils.RegionCodeFilters">
                            @context.RegionCode
                        </PropertyColumn>
                        
                        <PropertyColumn Property="c => c.NodeName" Title="Nœud" Filterable>
                            <a href="/node/@context.NodeId" target="_blank" rel="nofollow">@context.NodeName</a>
                        </PropertyColumn>
                        
                        <PropertyColumn Property="c => c.PortNum" Title="Type" Filters="Utils.PortNumFilters">
                            @(context.PortNum?.ToString() ?? "Chiffrées") 
                        </PropertyColumn>
                        
                        <PropertyColumn Property="c => c.Nb" Title="Nombre" Sortable DefaultSortOrder="SortDirection.Descending">
                            <a href="/node/@context.NodeId/packets" target="_blank" rel="nofollow">@context.Nb</a>
                        </PropertyColumn>
                    </Table>
                </ChildContent>
            </Card>
        </GridCol>
        
        <GridCol Xs="24" Lg="12">
            <Card Title="Profil de modulation">
                <ChildContent>
                    @if (Loading)
                    {
                    <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataProfileTypes" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>
        
        <GridCol Xs="24" Lg="12">
            <Card Title="Type de carte">
                <ChildContent>
                    @if (Loading)
                    {
                    <Skeleton></Skeleton>
                    }
                    else
                    {
                        <AntDesign.Charts.Pie Data="DataHardwareTypes" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="12">
            <Card Title="Type de nœud">
                <ChildContent>
                    @if (Loading)
                    {
                    <Skeleton></Skeleton>
                    }
                    else
                    {
                    <AntDesign.Charts.Pie Data="DataNodeTypes" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>

        <GridCol Xs="24" Lg="12">
            <Card Title="Versions de firmware installées">
                <ChildContent>
                    @if (Loading)
                    {
                    <Skeleton></Skeleton>
                    }
                    else
                    {
                    <AntDesign.Charts.Pie Data="DataFirmwareVersions" Config="_configPieType"/>
                    }
                </ChildContent>
            </Card>
        </GridCol>
    </GridRow>
</Spin>

@code
{
    private bool Loading { get; set; } = true;
    private DataContext Context { get; set; } = null!;
    private List<ChartData<int>> DataProfileTypes { get; set; } = [];
    private List<ChartData<int>> DataHardwareTypes { get; set; } = [];
    private List<ChartData<int>> DataNodeTypes { get; set; } = [];
    private List<ChartData<int>> DataFirmwareVersions { get; set; } = [];
    private List<PacketNodeType> DataYesterdayNodePackets { get; set; } = [];
    
    private readonly PieConfig _configPieType = new()
    {
        AngleField = "value",
        ColorField = "type",
        Label = new PieLabelConfig
        {
            Style = new TextStyle
            {
                FontSize = 20,
                Fill = "black",
                Stroke = "white",
            }
        },
    };
    
    // private readonly ColumnConfig _configBarType = new()
    // {
    //     XField = "type",
    //     YField = "value",
    //     Meta = new
    //     {
    //         Type = new
    //         {
    //             Alias = "Donnée",
    //         },
    //         Value = new
    //         {
    //             Alias = "Nombre",
    //         },
    //     },
    // };
    
    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();

        DataNodeTypes = await Context.Nodes
            .Where(a => a.Role.HasValue)
            .GroupBy(a => a.Role, (role, nodes) => new ChartData<int>
            {
                type = role.ToString()!,
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .ToListAsync();
        
        DataHardwareTypes = await Context.Nodes
            .Where(a => a.HardwareModel.HasValue)
            .GroupBy(a => a.HardwareModel, (hardwareModel, nodes) => new ChartData<int>
            {
                type = hardwareModel.ToString()!,
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .ToListAsync();
        
        DataProfileTypes = await Context.Nodes
            .Where(a => a.RegionCode.HasValue && a.ModemPreset.HasValue)
            .GroupBy(a => new
            {
                a.RegionCode,
                a.ModemPreset
            }, (profile, nodes) => new ChartData<int>
            {
                type = $"{profile.RegionCode} {profile.ModemPreset}",
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .ToListAsync();
        
        DataFirmwareVersions = await Context.Nodes
            .Where(a => !string.IsNullOrWhiteSpace(a.FirmwareVersion))
            .GroupBy(a => a.FirmwareVersion, (version, nodes) => new ChartData<int>
            {
                type = version ?? "",
                value = nodes.Count()
            })
            .OrderByDescending(v => v.value)
            .ToListAsync();

        var yesterday = DateTime.UtcNow.Date.AddDays(-1);
        
        DataYesterdayNodePackets = await Context.Packets
            .Where(a => a.PortNum != PortNum.MapReportApp && !string.IsNullOrWhiteSpace(a.PayloadJson))
            .Where(a => a.CreatedAt.Date >= yesterday)
            .GroupBy(a => new
            {
                a.MqttServer,
                a.From.RegionCode,
                NodeId = a.From.Id,
                NodeName = a.From.AllNames,
                a.PortNum
            }, (grouped, packets) => new PacketNodeType
            {
                MqttServer = grouped.MqttServer,
                RegionCode = grouped.RegionCode,
                NodeId = grouped.NodeId,
                NodeName = grouped.NodeName!,
                PortNum = grouped.PortNum,
                Nb = packets.Count()
            })
            .OrderByDescending(v => v.Nb)
            .Take(100)
            .ToListAsync();
        
        Loading = false;
        
        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
    
    public class PacketNodeType
    {
        public required string? MqttServer { get; set; }
        public required Config.Types.LoRaConfig.Types.RegionCode? RegionCode { get; set; }
        public required long NodeId { get; set; }
        public required string NodeName { get; set; }
        public required PortNum? PortNum { get; set; }
        public required int Nb { get; set; }
    }
}