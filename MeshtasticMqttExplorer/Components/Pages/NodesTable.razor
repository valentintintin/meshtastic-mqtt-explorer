@page "/nodes"
@rendermode InteractiveServer
@implements IAsyncDisposable

@using System.Reactive.Linq
@using AntDesign.TableModels
@using Meshtastic.Protobufs
@using MeshtasticMqttExplorer.Context
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Components.Shared
@using MeshtasticMqttExplorer.Extensions
@using MeshtasticMqttExplorer.Services
@using Node = MeshtasticMqttExplorer.Context.Entities.Node

@inject IDbContextFactory<DataContext> ContextFactory;

<PageTitle>Noeuds</PageTitle>

<PageHeader Title="Noeuds">
    <SubtitleTemplate>
        @Total noeuds
    </SubtitleTemplate>
    <PageHeaderExtra>
        <Button OnClick="FetchData">Actualiser</Button>
    </PageHeaderExtra>
</PageHeader>

<Table @ref="Table" TItem="Node" DataSource="_nodes" Responsive Total="Total" OnChange="OnTableChange">
    <ChildContent>
        <PropertyColumn Property="c => c.AllNames" Title="ID - Nom" Sortable Filterable DefaultSortOrder="SortDirection.Ascending">
            <a href="/node/@context.Id" target="_blank">@context.AllNames</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.IsMqttGateway" Title="Passerelle MQTT" Sortable>
           @(context.IsMqttGateway == true ? "Oui" : "Non")
        </PropertyColumn>
        <PropertyColumn Property="c => c.LastSeen" Title="Vu dernière fois" Sortable>
           <Date Value="context.LastSeen" Fallback="-"></Date>
        </PropertyColumn>
        <PropertyColumn Property="c => c.RegionCode" Title="Bande" Sortable Filters="Utils.RegionCodeFilters">
            @(context.RegionCode?.ToString() ?? "-")
        </PropertyColumn>
        <PropertyColumn Property="c => c.ModemPreset" Title="Profile de modulation" Sortable Filters="Utils.ModemPresetFilters">
            @(context.ModemPreset?.ToString() ?? "-")
        </PropertyColumn>
        <PropertyColumn Property="c => c.Role" Title="Rôle" Sortable Filters="Utils.RoleFilters">
            @(context.Role?.ToString() ?? "-")
        </PropertyColumn>
    </ChildContent>
</Table>

@code
{
    [Parameter]
    public long? Id { get; set; }
    
    private int Total { get; set; }
    private List<Node> _nodes = [];
    private DataContext Context { get; set; } = null!;
    private Table<Node>? Table { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();
        
        await base.OnInitializedAsync();
    }

    private void OnTableChange(QueryModel<Node> queryModel)
    {
        _nodes = queryModel.CurrentPagedRecords(
            queryModel.ExecuteQuery(Context.Nodes
                .Where(a => a.LastSeen.HasValue && a.NodeId != MqttService.NodeBroadcast))
        ).ToList();
    }

    private void FetchData()
    {
        if (Table != null)
        {
            OnTableChange((QueryModel<Node>) Table.GetQueryModel());
            Total = Context.Nodes.Count(a => a.Id != MqttService.NodeBroadcast);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}