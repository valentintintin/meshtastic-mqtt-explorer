@page "/nodes"
@implements IAsyncDisposable

@using MeshtasticMqttExplorer.Context
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Components.Shared
@using MeshtasticMqttExplorer.Services
@using Node = MeshtasticMqttExplorer.Context.Entities.Node

@inject IDbContextFactory<DataContext> ContextFactory

<PageTitle>Tableau des nœuds</PageTitle>

<PageHeader Title="Nœuds">
    <SubtitleTemplate>
        @Total nœuds
    </SubtitleTemplate>
    <PageHeaderExtra>
        <Button OnClick="FetchData">Actualiser</Button>
    </PageHeaderExtra>
    <PageHeaderContent>
        <NodeSearch></NodeSearch>
    </PageHeaderContent>
</PageHeader>

<Table TItem="Node" DataSource="NodesQueryable" Responsive Locale="Utils.TableLocale">
    <ChildContent>
        <PropertyColumn Property="c => c.AllNames" Title="ID - Nom" Sortable Filterable DefaultSortOrder="SortDirection.Ascending">
            <div style="width: 300px">
                <a href="/node/@context.Id" target="_blank" rel="nofollow">@context.AllNames</a>
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.LastSeen" Title="Vu dernière fois" Sortable>
            <div style="width: 130px">
                <Date Value="context.LastSeen" Fallback="-"></Date>
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.RegionCode" Title="Bande" Sortable Filters="Utils.RegionCodeFilters">
            <div style="width: 50px">
                @(context.RegionCode?.ToString() ?? "-")
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.ModemPreset" Title="Profil de modulation" Sortable Filters="Utils.ModemPresetFilters">
            <div style="width: 100px">
                @(context.ModemPreset?.ToString() ?? "-")
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Role" Title="Rôle" Sortable Filters="Utils.RoleFilters">
            <div style="width: 100px">
                @(context.Role?.ToString() ?? "-")
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.IsMqttGateway" Title="Passerelle MQTT" Sortable>
            <div style="width: 30px">
                @(context.IsMqttGateway == true ? "Oui" : "Non")
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.MqttServer" Title="Serveur MQTT" Filters="Utils.MqttServerFilters">
            <div style="width: 150px">
                @context.MqttServer
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.PrimaryChannel" Title="Canal principal" Filterable>
            <div style="width: 150px">
                @context.PrimaryChannel
            </div>
        </PropertyColumn>
    </ChildContent>
</Table>

@code
{
    [Parameter]
    public long? Id { get; set; }
    
    private int Total { get; set; }
    private IQueryable<Node> NodesQueryable { get; set; } = null!;
    private DataContext Context { get; set; } = null!;
    
    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();
        
        NodesQueryable = Context.Nodes
            .Where(a => a.LastSeen.HasValue && MeshtasticService.NodesIgnored.All(b => b != a.NodeId))
            .AsNoTrackingWithIdentityResolution();
        
        var localContext = await ContextFactory.CreateDbContextAsync();
        
        Total = localContext.Nodes
            .AsNoTrackingWithIdentityResolution()
            .Count(a => a.LastSeen.HasValue && MeshtasticService.NodesIgnored.All(b => b != a.NodeId));
        
        await localContext.DisposeAsync();

        await base.OnInitializedAsync();
    }

    private void FetchData()
    {
        Total = Context.Nodes
            .AsNoTrackingWithIdentityResolution()
            .Count(a => a.LastSeen.HasValue && MeshtasticService.NodesIgnored.All(b => b != a.NodeId));
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}