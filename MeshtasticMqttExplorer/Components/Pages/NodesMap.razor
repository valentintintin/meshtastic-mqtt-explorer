@page "/"
@page "/map"

@implements IAsyncDisposable
@using System.Globalization
@using Meshtastic.Protobufs
@using MeshtasticMqttExplorer.Components.Shared
@using MeshtasticMqttExplorer.Context
@using MeshtasticMqttExplorer.Extensions
@using Microsoft.EntityFrameworkCore
@using Node = MeshtasticMqttExplorer.Context.Entities.Node

@inject IDbContextFactory<DataContext> ContextFactory;

<PageTitle>Carte des nœuds</PageTitle>

<PageHeader Title="Cartes des nœuds">
    <SubtitleTemplate>
        @Total nœuds avec position dont @TotalAlive en vie
        @if (Total > 0)
        {
            @Math.Round((double) TotalAlive / (double) Total * 100)<text>%</text>
        }
    </SubtitleTemplate>
    <PageHeaderExtra>
        <Button Disabled="@Loading" OnClick="FetchData">Actualiser</Button>
    </PageHeaderExtra>
    <PageHeaderContent>
        <div>
            <Segmented Disabled="Loading" Options="@RegionsCodes" Value="CurrentRegionCode" TValue="Config.Types.LoRaConfig.Types.RegionCode?" OnChange="value => SetRegionCode(value)" />
            <Segmented Disabled="Loading" Options="@ModemsPresets" Value="CurrentModemPreset" TValue="Config.Types.LoRaConfig.Types.ModemPreset?" OnChange="value => SetModemPreset(value)" />
            <Segmented Disabled="Loading" Options="@Frequencies" Value="CurrentFrequencies" TValue="string[]" OnChange="value => SetFrequency(value)" />
        </div>

        <div>
            <Switch @bind-Checked="ShowNeighbors" Disabled="@Loading" CheckedChildren="Afficher les voisins" UnCheckedChildren="Cacher les voisins" OnChange="FetchData"/>
            <Switch @bind-Checked="ShowPois" Disabled="@Loading" CheckedChildren="Afficher les points d'intérêts" UnCheckedChildren="Cacher les points d'intérêts" OnChange="FetchData"/>
            <Switch @bind-Checked="ShowPaths" Disabled="@Loading" CheckedChildren="Afficher les routes directes" UnCheckedChildren="Cacher les routes directes" OnChange="FetchData" />
        </div>

        <div>
            <span>
                Depuis :
                <DatePicker TValue="DateOnly?" Picker="@DatePickerType.Date" @bind-Value="FromDate" DisabledDate="date => date > DateTime.Today || date < DateTime.Today.AddDays(-16)" OnChange="FetchData"/>
            </span>

            <span>
                Distance max des liens :
                <AntDesign.InputNumber Formatter="FormatKm" Parser="ParseKm" Min="10" Max="1000" Step="10" @bind-value="MaxDistanceLink" TValue="int" OnChange="FetchData" />
            </span>
        </div>
        
        <div>
            <NodeSearch></NodeSearch>
        </div>
    </PageHeaderContent>
</PageHeader>

<Spin Spinning="Loading">
    <Osm Height="calc(100vh - 270px)" @ref="Map" Latitude="46.199144" Longitude="2.321139" Zoom="5"></Osm>
    
    <Card Title="Légende" Size="small" Bordered="true">
        <ChildContent>
            <GridRow Gutter="(16, 16)" Justify="center">
                <GridCol Xs="24" Md="12">
                    <div class="legend">
                        <span style="@GetIconStyleCss(Utils.Green)" class="legend-circle"></span>
                        En ligne | Passerelle MQTT
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(Utils.Blue)" class="legend-circle"></span>
                        En ligne
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(Utils.Red)" class="legend-circle"></span>
                        Hors ligne depuis plus de 24h
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(Utils.Gray)" class="legend-circle"></span>
                        Bande et profil de modulation inconnu
                    </div>
                </GridCol>
    
                <GridCol Xs="24" Md="12">
                    @if (ShowNeighbors)
                    {
                        <div class="legend">
                            <span style="background-color: @Utils.Red" class="legend-bar"></span>
                            Voisin du nœud
                        </div>
                    }
                    @if (ShowPaths)
                    {
                        <div class="legend">
                            <span style="background-color: @Utils.Gold" class="legend-bar"></span>
                            Route directe
                        </div>
                    }
                    @if (ShowPois)
                    {
                        <div class="legend">
                            <span style="@GetIconStyleCss(Utils.Orange, null, 0)" class="legend-circle"></span>
                            Point d'intétêt
                        </div>
                    }
                </GridCol>
            </GridRow>
        </ChildContent>
    </Card>
</Spin>

@code
{
    const int DifferenceBetweenDistanceAllowed = 50; 
    
    private bool Loading { get; set; }
    private bool HasRenderMapData { get; set; }
    private bool ShowNeighbors { get; set; } = true;
    private bool ShowPaths { get; set; } = true;
    private bool ShowPois { get; set; } = true;
    private int Total { get; set; }
    private int TotalAlive { get; set; }
    private int MaxDistanceLink { get; set; } = 350;
    private DateOnly? FromDate { get; set; } = DateOnly.FromDateTime(DateTime.UtcNow).AddDays(-3);
    private List<Node> Nodes { get; set; } = [];
    private DataContext Context { get; set; } = null!;
    private Osm? Map { get; set; }
    private Config.Types.LoRaConfig.Types.RegionCode? CurrentRegionCode { get; set; } = Config.Types.LoRaConfig.Types.RegionCode.Eu868;
    private Config.Types.LoRaConfig.Types.ModemPreset? CurrentModemPreset { get; set; } = Config.Types.LoRaConfig.Types.ModemPreset.LongModerate;
    private string[]? CurrentFrequencies { get; set; }
    private List<SegmentedOption<Config.Types.LoRaConfig.Types.RegionCode?>> RegionsCodes { get; } = Utils.RegionCodeFilters.Take(2)
        .Select(a => new SegmentedOption<Config.Types.LoRaConfig.Types.RegionCode?>(a.Value, a.Text))
        .Concat([new SegmentedOption<Config.Types.LoRaConfig.Types.RegionCode?>(null, "Tous")])
        .ToList();
    private List<SegmentedOption<Config.Types.LoRaConfig.Types.ModemPreset?>> ModemsPresets { get; } = Utils.ModemPresetFilters.Take(2)
        .Select(a => new SegmentedOption<Config.Types.LoRaConfig.Types.ModemPreset?>(a.Value, a.Text))
        .Concat([new SegmentedOption<Config.Types.LoRaConfig.Types.ModemPreset?>(null, "Tous")])
        .ToList();
    private List<SegmentedOption<string[]>> Frequencies { get; } = [ 
        new SegmentedOption<string[]>([""], "Tous"),
        new SegmentedOption<string[]>(["869.4", ".400"], "869.400 Mhz"),
        new SegmentedOption<string[]>([".4625"], "869.4625 Mhz"),
    ];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && Map != null && !HasRenderMapData)
        {
            await Map.ClearMarkers();
            
            var markers = Nodes.Select(GetMarker).ToList();
            List<Osm.Line> lines = [];
            
            foreach (var node in Nodes)
            {
                if (ShowPaths && node.PacketsFrom.Any())
                {
                    lines.AddRange(
                        node.PacketsFrom
                            .Where(g => Math.Abs(g.GatewayDistanceKm!.Value - Utils.CalculateDistance(node.Latitude!.Value, node.Longitude!.Value, g.Gateway.Latitude!.Value, g.Gateway.Longitude!.Value)) < DifferenceBetweenDistanceAllowed)
                            .Select(p =>
                            {
                                markers.Add(GetMarker(p.Gateway));
                                
                                return new Osm.Line
                                {
                                    Id = $"node(gateway)-{p.Gateway.Id}->node-{node.Id}",
                                    Points =
                                    [
                                        [node.Latitude!.Value, node.Longitude!.Value],
                                        [p.Gateway.Latitude!.Value, p.Gateway.Longitude!.Value]
                                    ],
                                    Color = Utils.Gold,
                                    Popup = $"<p><a href=\"/node/{node.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{node.AllNames}</b></a></p><p>Passerelle MQTT : <a href=\"/node/{p.Gateway.Id}\" target=\"_blank\"><b>{p.Gateway.AllNames}</b></a></p><p>Distance : {(p.GatewayDistanceKm.HasValue ? Math.Round(p.GatewayDistanceKm.Value, 2) : "-")} Km</p><p>SNR : {p.RxSnr}</p>"
                                };
                            })
                    );
                }
                
                if (ShowNeighbors && node.MyNeighbors.Any())
                {
                    lines.AddRange(
                        node.MyNeighbors
                            .Where(n => n.Neighbor is { Latitude: not null, Longitude: not null })
                            .Where(n => Math.Abs(n.Distance!.Value - Utils.CalculateDistance(node.Latitude!.Value, node.Longitude!.Value, n.Neighbor.Latitude!.Value, n.Neighbor.Longitude!.Value)) < DifferenceBetweenDistanceAllowed)
                            .Select(n =>
                            {
                                markers.Add(GetMarker(n.Neighbor));
                                
                                return new Osm.Line
                                {
                                    Id = $"node(neighbor)-{n.Node.Id}->node-{node.Id}",
                                    Points =
                                    [
                                        [node.Latitude!.Value, node.Longitude!.Value],
                                        [n.Neighbor.Latitude!.Value, n.Neighbor.Longitude!.Value]
                                    ],
                                    Color = Utils.Red,
                                    Popup = $"<p><a href=\"/node/{node.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{node.AllNames}</b></a></p><p>Voisin : <a href=\"/node/{n.Neighbor.Id}\" target=\"_blank\"><b>{n.Neighbor.AllNames}</b></a></p><p>Distance : {(n.Distance.HasValue ? Math.Round(n.Distance.Value, 2) : "-")} Km</p><p>SNR : {n.Snr}</p>"
                                };
                            })
                    );
                    
                    lines.AddRange(
                        node.NeighborsFor
                            .Where(n => n.Node is { Latitude: not null, Longitude: not null })
                            .Where(n => Math.Abs(n.Distance!.Value - Utils.CalculateDistance(node.Latitude!.Value, node.Longitude!.Value, n.Node.Latitude!.Value, n.Node.Longitude!.Value)) < DifferenceBetweenDistanceAllowed)
                            .Select(n =>
                            {
                                markers.Add(GetMarker(n.Node));
                                
                                return new Osm.Line
                                {
                                    Id = $"node(neighbor)-{n.Node.Id}->node-{node.Id}",
                                    Points =
                                    [
                                        [node.Latitude!.Value, node.Longitude!.Value],
                                        [n.Node.Latitude!.Value, n.Node.Longitude!.Value]
                                    ],
                                    Color = Utils.Red,
                                    Popup = $"<p><a href=\"/node/{node.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{node.AllNames}</b></a></p><p>Voisin : <a href=\"/node/{n.Node.Id}\" target=\"_blank\"><b>{n.Node.AllNames}</b></a></p><p>Distance : {(n.Distance.HasValue ? Math.Round(n.Distance.Value, 2) : "-")} Km</p><p>SNR : {n.Snr}</p>"
                                };
                            })
                    );
                }

                if (ShowPois && node.Waypoints.Any())
                {
                    lines.AddRange(
                        node.Waypoints
                            .Select(n => new Osm.Line
                            {
                                Id = $"waypoint-{n.Id}->node-{node.Id}",
                                Points = [
                                    [node.Latitude!.Value, node.Longitude!.Value],
                                    [n.Latitude, n.Longitude]
                                ],
                                Color = Utils.Orange,
                                Popup = $"<p><a href=\"/node/{node.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{node.AllNames}</b></a></p><p>Point d'intérêt : <b>{n.Name}</b></p><p>{n.Description}</p><p>Distance : {Utils.CalculateDistance(node.Latitude!.Value, node.Longitude!.Value, n.Latitude, n.Longitude)} Km</p>"
                            })
                    );
                    
                    markers.AddRange(
                        node.Waypoints
                            .Select(n => new Osm.Marker
                            {
                                Id = $"waypoint-{n.Id}",
                                Latitude = n.Latitude,
                                Longitude = n.Longitude,
                                Color = Utils.Orange,
                                IconType = Osm.IconType.Circle,
                                Label = $"Point d'intérêt : {n.Name}",
                                Popup = !string.IsNullOrWhiteSpace(n.Description) ? $"<p><b>{n.Name}</b></p><p>{n.Description}</p>" : null
                            })
                    );
                }
            }

            await Map.AddPolylines(lines);
            await Map.AddMarkers(markers.DistinctBy(n => n.Id).ToList());

            HasRenderMapData = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        if (CultureInfo.CurrentCulture.Name != "fr-FR")
        {
            CurrentRegionCode = null;
            CurrentModemPreset = null;
        }
        
        Context = await ContextFactory.CreateDbContextAsync();

        await FetchData();

        await base.OnInitializedAsync();
    }

    private async Task FetchData()
    {
        if (Loading)
        {
            return;
        }
        
        Loading = true;
        
        Nodes = await Context.Nodes
            .Include(n => n.PacketsFrom.Where(a => a.GatewayDistanceKm > 0 && a.GatewayId != a.FromId && a.Gateway.Latitude.HasValue && a.Gateway.Longitude.HasValue && a.GatewayDistanceKm < MaxDistanceLink && a.HopStart == a.HopLimit).OrderByDescending(a => a.CreatedAt).Take(1)).ThenInclude(n => n.Gateway)
            .Include(n => n.MyNeighbors.Where(a => a.Distance > 0 && a.Distance < MaxDistanceLink && a.Neighbor.Latitude.HasValue && a.Neighbor.Longitude.HasValue)).ThenInclude(n => n.Neighbor)
            .Include(n => n.Waypoints.Where(a => a.ExpiresAt >= DateTime.UtcNow))
            .Where(n => n.Latitude.HasValue && n.Longitude.HasValue)
            .Where(n => n.LastSeen.HasValue)
            .Where(n => !FromDate.HasValue || n.LastSeen >= FromDate.Value.ToDateTime(TimeOnly.MinValue, DateTimeKind.Utc))
            .Where(n => CurrentRegionCode == null|| n.RegionCode == CurrentRegionCode)
            .Where(n => CurrentModemPreset == null || n.ModemPreset == CurrentModemPreset)
            .Where(n => CurrentFrequencies == null || n.LongName != null && CurrentFrequencies.Any(c => n.LongName.Contains(c)))
            .AsSplitQuery()
            .ToListAsync();

        Total = Nodes.Count;
        TotalAlive = Nodes.Count(n => !n.IsOffline());
        
        Loading = false;
        HasRenderMapData = false;
    }

    private Osm.Marker GetMarker(Node node)
    {
        var color = node.IsOffline() ? Utils.Red : node.IsMqttGateway == true ? Utils.Green : Utils.Blue;
        
        return new Osm.Marker
        {
            Id = node.Id.ToString(),
            Latitude = node.Latitude!.Value,
            Longitude = node.Longitude!.Value,
            Label = node.AllNames,
            Popup = $"<p><a href=\"/node/{node.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{node.AllNames}</b></a></p><p>{node.RegionCode?.ToString() ?? "UNSET"} | {node.ModemPreset?.ToString() ?? ""}</p><p>{node.Role?.ToString() ?? ""} | {(node.IsMqttGateway == true ? "Passerelle MQTT" : "")}</p><p>Dernière MAJ : {node.LastSeen?.ToFrench().ToString(CultureInfo.CurrentCulture)}</p>",
            IconType = Osm.IconType.Circle,
            Color = color,
            FillColor = node.RegionCode.HasValue ? color : Utils.Gray,
            Opacity = 1
        };
    }

    private string GetIconStyleCss(string color, string? fillColor = null, float opacity = 1)
    {
        return $"border-color: {color}; {(opacity > 0 ? $"background-color: {fillColor ?? color}" : "")}";
    }

    private async Task SetRegionCode(Config.Types.LoRaConfig.Types.RegionCode? regionCode)
    {
        CurrentRegionCode = regionCode;

        await FetchData();
    }

    private async Task SetModemPreset(Config.Types.LoRaConfig.Types.ModemPreset? modemPreset)
    {
        CurrentModemPreset = modemPreset;
        
        await FetchData();
    }

    private async Task SetFrequency(string[]? frequency)
    {
        CurrentFrequencies = frequency;
        
        await FetchData();
    }
    
    private string FormatKm(int value)
    {
        return value + " Km";
    }

    private string ParseKm(string value)
    {
        return value.Replace(" Km", "");
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}