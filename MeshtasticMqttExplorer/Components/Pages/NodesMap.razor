@page "/map"
@implements IAsyncDisposable

@using System.Globalization
@using Meshtastic.Protobufs
@using MeshtasticMqttExplorer.Components.Shared
@using MeshtasticMqttExplorer.Context
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Extensions
@using Color = System.Drawing.Color
@using Node = MeshtasticMqttExplorer.Context.Entities.Node

@inject IDbContextFactory<DataContext> ContextFactory;

<PageTitle>Carte des nœuds</PageTitle>

<PageHeader Title="Cartes des nœuds">
    <SubtitleTemplate>
        @Total nœuds avec position depuis hier
    </SubtitleTemplate>
    <PageHeaderExtra>
        <Switch @bind-Checked="ShowNeighbors" Disabled="@Loading" CheckedChildren="Afficher les voisins" UnCheckedChildren="Cacher les voisins" OnChange="FetchData" />
        <Switch @bind-Checked="ShowPaths" Disabled="@Loading" CheckedChildren="Afficher les routes" UnCheckedChildren="Cacher les routes" OnChange="FetchData" />
        <Switch @bind-Checked="ShowPois" Disabled="@Loading" CheckedChildren="Afficher les points d'intérêts" UnCheckedChildren="Cacher les points d'intérêts" OnChange="FetchData" />
        <Button Disabled="@Loading" OnClick="FetchData">Actualiser</Button>
    </PageHeaderExtra>
</PageHeader>

<Spin Spinning="Loading">
    <Osm Height="calc(100vh - 270px)" @ref="Map" Latitude="46.199144" Longitude="2.321139" Zoom="5"></Osm>
    
    <Card Title="Légende" Size="small" Bordered="true">
        <ChildContent>
            <GridRow Gutter="(16, 16)" Justify="center">
               <GridCol Xs="24" Md="5">
                   <div class="legend">
                       <span style="@GetIconStyleCss(GetIconStyle(Utils.Red, Config.Types.LoRaConfig.Types.RegionCode.Eu433))" class="legend-circle"></span>
                       433Mhz | Hors ligne depuis plus de 3h
                   </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Green, Config.Types.LoRaConfig.Types.RegionCode.Eu433))" class="legend-circle"></span>
                        433Mhz | En ligne - Passerelle MQTT
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Blue, Config.Types.LoRaConfig.Types.RegionCode.Eu433))" class="legend-circle"></span>
                        433Mhz | En ligne - Pas de MQTT
                    </div>
               </GridCol>
    
                <GridCol Xs="24" Md="5">
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Red, Config.Types.LoRaConfig.Types.RegionCode.Eu868))" class="legend-circle"></span>
                        868Mhz | Hors ligne depuis plus de 3h
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Green, Config.Types.LoRaConfig.Types.RegionCode.Eu868))" class="legend-circle"></span>
                        868Mhz | En ligne - Passerelle MQTT
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Blue, Config.Types.LoRaConfig.Types.RegionCode.Eu868))" class="legend-circle"></span>
                        868Mhz | En ligne - Pas de MQTT
                    </div>
                </GridCol>

                <GridCol Xs="24" Md="8">
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Red, Config.Types.LoRaConfig.Types.RegionCode.Unset))" class="legend-circle"></span>
                        Autres bandes | Manque de données | Hors ligne depuis plus de 3h
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Green, Config.Types.LoRaConfig.Types.RegionCode.Unset))" class="legend-circle"></span>
                        Autres bandes | Manque de données | En ligne - Passerelle MQTT
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Blue, Config.Types.LoRaConfig.Types.RegionCode.Unset))" class="legend-circle"></span>
                        Autres bandes | Manque de données | En ligne - Pas de MQTT
                    </div>
                    <div class="legend">
                        <span style="@GetIconStyleCss(GetIconStyle(Utils.Gray, Config.Types.LoRaConfig.Types.RegionCode.Unset))" class="legend-circle"></span>
                        Autres bandes | Manque de données
                    </div>
                </GridCol>

                <GridCol Xs="24" Md="6">
                    <div class="legend">
                        <span style="background-color: @Utils.Red" class="legend-bar"></span>
                        Voisin du nœud
                    </div>
                    <div class="legend">
                        <span style="background-color: @Utils.Green" class="legend-bar"></span>
                        Paquets relayés par cette passerelle MQTT
                    </div>
                    <div class="legend">
                        <img src="https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png"
                             alt="Marqueur orange d'un point d'intétêt" class="legend-image" />
                        Point d'intétêt
                    </div>
                </GridCol>
            </GridRow>
        </ChildContent>
    </Card>
</Spin>

@code
{
    private bool Loading { get; set; } = true;
    private bool HasRenderMapData { get; set; }
    private bool ShowNeighbors { get; set; }
    private bool ShowPaths { get; set; }
    private bool ShowPois { get; set; }
    private int Total { get; set; }
    private List<Node> Nodes { get; set; } = [];
    private DataContext Context { get; set; } = null!;
    private Osm? Map { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && Map != null && !HasRenderMapData)
        {
            var markers = Nodes.Select(GetMarker).ToList();
            List<Osm.Line> lines = [];
            
            foreach (var node in Nodes)
            {
                if (ShowNeighbors && node.MyNeighbors.Any())
                {
                    lines.AddRange(
                        node.MyNeighbors
                            .Select(n => n.Neighbor)
                            .Where(n => n is { Latitude: not null, Longitude: not null })
                            .Select(n => new Osm.Line
                            {
                                Id = $"{node.Id}-neighbor-{n.Id}",
                                Points = [
                                    new[] { node.Latitude!.Value, node.Longitude!.Value },
                                    new[] { n.Latitude!.Value, n.Longitude!.Value }
                                ],
                                Color = Utils.Red
                            })
                    );
                }

                if (ShowPaths && node.PacketsFrom.Any())
                {
                    lines.AddRange(
                        node.PacketsFrom
                            .GroupBy(a => a.Gateway) // Useful when we do not take 1 packet but n
                            .Select(n => n.Key)
                            .Where(n => n is { Latitude: not null, Longitude: not null })
                            .Select(n => new Osm.Line
                            {
                                Id = $"{node.Id}-gateway-{n.Id}",
                                Points = [
                                    new[] { node.Latitude!.Value, node.Longitude!.Value },
                                    new[] { n.Latitude!.Value, n.Longitude!.Value }
                                ],
                                Color = Utils.Green
                            })
                    );
                }

                if (ShowPois && node.Waypoints.Any())
                {
                    lines.AddRange(
                        node.Waypoints
                            .Select(n => new Osm.Line
                            {
                                Id = $"{node.Id}-waypoint-{n.Id}",
                                Points = [
                                    new[] { node.Latitude!.Value, node.Longitude!.Value },
                                    new[] { n.Latitude, n.Longitude }
                                ],
                                Color = Utils.Orange
                            })
                    );
                    
                    markers.AddRange(
                        node.Waypoints
                            .Select(n => new Osm.Marker
                            {
                                Id = $"waypoint-{n.Id}",
                                Latitude = n.Latitude,
                                Longitude = n.Longitude,
                                Color = "orange",
                                Label = $"Point d'intérêt : {n.Name}",
                                Popup = !string.IsNullOrWhiteSpace(n.Description) ? $"<p><b>{n.Name}</b></p><p>{n.Description}</p>" : null
                            })
                    );
                }
            }

            await Map.AddPolylines(lines);
            await Map.AddMarkers(markers);

            HasRenderMapData = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();

        await FetchData();

        await base.OnInitializedAsync();
    }

    private async Task FetchData()
    {
        Loading = true;
        HasRenderMapData = false;

        if (Map != null)
        {
            await Map.Reload();
        }

        var yesterday = DateTime.UtcNow.Date.AddDays(-1);

        Nodes = await Context.Nodes
            .Include(n => n.PacketsFrom.Where(a => a.GatewayId != a.FromId && a.Gateway.Latitude.HasValue && a.Gateway.Longitude.HasValue).OrderByDescending(a => a.CreatedAt).Take(1)).ThenInclude(n => n.Gateway)
            .Include(n => n.MyNeighbors.Where(a => a.CreatedAt >= yesterday && a.Neighbor.Latitude != null)).ThenInclude(n => n.Neighbor)
            .Include(n => n.Waypoints.Where(a => a.ExpiresAt >= DateTime.UtcNow))
            .Where(n => n.Latitude.HasValue && n.Longitude.HasValue)
            .Where(n => n.LastSeen >= yesterday)
            .AsSplitQuery()
            .ToListAsync();

        Total = Nodes.Count;
        
        Loading = false;
    }

    private Osm.Marker GetMarker(Node node)
    {
        var offline = (DateTime.UtcNow - node.LastSeen!).Value.TotalHours > 3;
        var color = offline ? Utils.Red : node.IsMqttGateway == true ? Utils.Green : Utils.Blue;

        var style = GetIconStyle(color, node.RegionCode);
        
        return new Osm.Marker
        {
            Id = node.Id.ToString(),
            Latitude = node.Latitude!.Value,
            Longitude = node.Longitude!.Value,
            Label = node.AllNames,
            Popup = $"<p><a href=\"/node/{node.Id}\" target=\"_blank\"><b>{node.AllNames}</b></a></p><p>{node.RegionCode?.ToString() ?? "UNSET"} | {node.ModemPreset?.ToString() ?? ""}</p><p>{node.Role?.ToString() ?? ""} | {(node.IsMqttGateway == true ? "Passerelle MQTT" : "")}</p><p>Dernière MAJ : {node.LastSeen!.Value.ToFrench().ToString(CultureInfo.CurrentCulture)}</p>",
            IconType = Osm.IconType.Circle,
            Color = style.color,
            FillColor = style.fillColor,
            Opacity = style.opacity
        };
    }

    private (string color, string fillColor, float opacity) GetIconStyle(string color, Config.Types.LoRaConfig.Types.RegionCode? regionCode)
    {
        var fillColor = regionCode switch
        {
            Config.Types.LoRaConfig.Types.RegionCode.Eu433 => "*",
            Config.Types.LoRaConfig.Types.RegionCode.My433 => "*",
            Config.Types.LoRaConfig.Types.RegionCode.Ua433 => "*",
            Config.Types.LoRaConfig.Types.RegionCode.Eu868 => color,
            Config.Types.LoRaConfig.Types.RegionCode.Ua868 => color,
            _ => Utils.Gray
        };
        
        var opacity = regionCode switch
        {
            Config.Types.LoRaConfig.Types.RegionCode.Eu433 => 0,
            Config.Types.LoRaConfig.Types.RegionCode.My433 => 0,
            Config.Types.LoRaConfig.Types.RegionCode.Ua433 => 0,
            Config.Types.LoRaConfig.Types.RegionCode.Eu868 => 1,
            Config.Types.LoRaConfig.Types.RegionCode.Ua868 => 1,
            _ => 1
        }; 

        return (color, fillColor, opacity);
    }

    private string GetIconStyleCss((string color, string fillColor, float opacity) args)
    {
        return $"border-color: {args.color}; {(args.opacity > 0 ? $"background-color: {args.fillColor}" : "")}";
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}