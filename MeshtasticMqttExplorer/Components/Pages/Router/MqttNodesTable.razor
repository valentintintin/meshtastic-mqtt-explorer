@page "/router/nodes"
@implements IAsyncDisposable
@using Common.Context
@using Common.Context.Entities.Router
@using Common.Extensions
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Components.Shared
@using Node = Common.Context.Entities.Node

@inject IDbContextFactory<DataContext> ContextFactory

<PageTitle>Tableau des nœuds MQTT</PageTitle>

<PageHeader Title="Nœuds MQTT">
    <SubtitleTemplate>
        @Total nœuds MQTT dont @TotalConnected connectés
    </SubtitleTemplate>
    <PageHeaderContent>
        <Switch @bind-Checked="OnlyConnected" UnCheckedChildren="Tous les noeuds" CheckedChildren="Seulement les connectés" OnChange="value => SetShowOnlyConnected(value)"/>
    </PageHeaderContent>
    <PageHeaderExtra>
        <Button OnClick="FetchData">Actualiser</Button>
    </PageHeaderExtra>
</PageHeader>

<Table TItem="NodeConfiguration" DataSource="NodesQueryable" Responsive Locale="Utils.TableLocale">
    <ChildContent>
        <PropertyColumn Property="c => c.Node.AllNames" Title="ID - Nom" Sortable SortDirections="new [] { SortDirection.Ascending, SortDirection.Descending }" Filterable DefaultSortOrder="SortDirection.Ascending">
            <div style="width: 300px">
                <a href="/node/@context.Node.Id" target="_blank" rel="nofollow">@context.Node.AllNames</a>
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.UpdatedAt" Title="Date de mise à jour" Sortable SortDirections="new [] { SortDirection.Ascending, SortDirection.Descending }" Filterable>
            @context.UpdatedAt.ToFrench()
        </PropertyColumn>
        <PropertyColumn Property="c => c.Department" Title="Département" Sortable SortDirections="new [] { SortDirection.Ascending, SortDirection.Descending }" Filterable>
            <div style="width: 100px">
                @context.Department
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.MqttId" Title="MQTT client ID" Filterable>
            @context.MqttId
        </PropertyColumn>
        <PropertyColumn Property="c => c.UserId" Title="Utilisateur">
            @if (context.User != null)
            {
                <a href="mailto:@context.User.Email">@context.User.UserName - @context.User.Email</a>
            }
        </PropertyColumn>
        @* <PropertyColumn Property="c => c.MqttId" Title="Interdit d'emission" Filterable> *@
            @* <div style="width: 100px"> *@
                @* @(context.Forbidden ? "Oui" : "Non") *@
            @* </div> *@
        @* </PropertyColumn> *@
    </ChildContent>
</Table>

@code
{
    [Parameter]
    public long? Id { get; set; }
    
    private bool OnlyConnected { get; set; }
    private int Total { get; set; }
    private int TotalConnected { get; set; }
    private IQueryable<NodeConfiguration> NodesQueryable { get; set; } = null!;
    private DataContext Context { get; set; } = null!;
    
    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();
        
        NodesQueryable = Context.NodeConfigurations
            .Include(a => a.Node)
            .Include(a => a.User)
            .Where(a => !OnlyConnected || !string.IsNullOrWhiteSpace(a.MqttId))
            .AsNoTrackingWithIdentityResolution();
        
        var localContext = await ContextFactory.CreateDbContextAsync();
        
        Total = localContext.NodeConfigurations
            .AsNoTrackingWithIdentityResolution()
            .Count();
        
        TotalConnected = localContext.NodeConfigurations
            .AsNoTrackingWithIdentityResolution()
            .Count(a => !string.IsNullOrWhiteSpace(a.MqttId));
        
        await localContext.DisposeAsync();

        await base.OnInitializedAsync();
    }

    private void FetchData()
    {
        Total = Context.NodeConfigurations
            .AsNoTrackingWithIdentityResolution()
            .Count();
    }

    private void SetShowOnlyConnected(bool value)
    {
        OnlyConnected = value;
        FetchData();
    } 

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}