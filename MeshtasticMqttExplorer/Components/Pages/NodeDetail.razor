@page "/node/{id:long}"
@rendermode InteractiveServer
@implements IAsyncDisposable

@using Meshtastic.Protobufs
@using MeshtasticMqttExplorer.Context
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Components.Shared

@inject IDbContextFactory<DataContext> ContextFactory

<PageTitle>DÃ©tails du noeud @Node?.FullName()</PageTitle>

<Spin Spinning="Loading">
    @if (Node != null)
    {
        <PageHeader Title="@Node?.Name()" Subtitle="@Node?.NodeIdAsString()">
            <PageHeaderTags>
                @if (Alive)
                {
                    <Tag Color="@PresetColor.Blue.ToString()">Vue il y a moins de 3h</Tag>
                }
                else
                {
                    <Tag Color="@PresetColor.Red.ToString()">Vue il y a plus de 3h</Tag>
                }
                
                @if (Node?.IsMqttGateway == true)
                {
                    <Tag Color="@PresetColor.Green.ToString()">Passerelle MQTT</Tag>
                }
                
                @if (Node?.RegionCode != null)
                {
                    <Tag>@Node.RegionCode</Tag>
                }
                
                @if (Node?.ModemPreset != null)
                {
                    <Tag>@Node.ModemPreset</Tag>
                }
                
                @if (Node?.Role != null)
                {
                    <Tag>@Node.Role</Tag>
                }
            </PageHeaderTags>
            <PageHeaderExtra>
                <Button OnClick="FetchData">Actualiser</Button>
            </PageHeaderExtra>
        </PageHeader>

        <Node NodeInfo="Node" NbPackets="NbPackets"></Node>
    }
    else if (Loading)
    {
        <Skeleton></Skeleton>
    }
    else
    {
        <Result Title="Noeud introuvable" Status="404"></Result>
    }
</Spin>

@code
{
    [Parameter]
    public long Id { get; set; }

    private bool Loading { get; set; } = true;
    private bool Alive { get; set; }
    private Context.Entities.Node? Node { get; set; }
    private Node.NbPacketsMetrics NbPackets { get; } = new();
    private DataContext Context { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();

        await FetchData();

        await base.OnInitializedAsync();
    }

    private async Task FetchData()
    {
        Node = null;
        Loading = true;
        
        var today = DateTime.UtcNow.Date;
        var threeHours = DateTime.UtcNow.AddHours(-3);
        var yesterday = DateTime.UtcNow.Date.AddDays(-1);
        var threeDays = DateTime.UtcNow.Date.AddDays(-3);
        
        Node = await Context.Nodes
            .Include(n => n.PacketsFrom.Where(a => a.CreatedAt >= threeDays && a.GatewayId != a.FromId && a.Gateway.Latitude != null).OrderByDescending(a => a.CreatedAt).Take(100)).ThenInclude(n => n.Gateway)
            .Include(n => n.MyNeighbors.Where(a => a.CreatedAt >= threeDays)).ThenInclude(n => n.Neighbor)
            .Include(n => n.Positions.Where(a => a.CreatedAt >= yesterday).OrderByDescending(a => a.CreatedAt).Take(100))
            .Include(n => n.Telemetries.Where(a => a.CreatedAt >= threeDays))
            .AsSplitQuery()
            .FirstOrDefaultAsync(a => a.Id == Id);

        Alive = Node.LastSeen >= threeHours;
        
        var countPackets = Context.Packets.Where(a => a.From == Node && a.PortNum != PortNum.MapReportApp);
        NbPackets.Total = await countPackets.CountAsync();
        NbPackets.Today = await countPackets.CountAsync(a => a.CreatedAt.Date == today);
        NbPackets.Yesterday = await countPackets.CountAsync(a => a.CreatedAt.Date == yesterday);
        
        Loading = false;
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}