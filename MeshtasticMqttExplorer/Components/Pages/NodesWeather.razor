@page "/weather"
@implements IAsyncDisposable

@using Common.Context
@using Common.Context.Entities
@using Common.Extensions
@using Common.Extensions.Entities
@using MeshtasticMqttExplorer.Components.Shared
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<DataContext> ContextFactory;

<PageTitle>Données météo</PageTitle>

<PageHeader Title="Météo">
    <SubtitleTemplate>
        @Telemetries.Count données depuis les dernières 2h
    </SubtitleTemplate>
    <PageHeaderExtra>
        <Button Disabled="@Loading" OnClick="FetchData">Actualiser</Button>
    </PageHeaderExtra>
</PageHeader>

<Spin Spinning="Loading">
    <Osm Height="calc(100vh - 250px)" @ref="Map" Latitude="46.199144" Longitude="2.321139" Zoom="5"></Osm>
</Spin>

@code
{
    private bool Loading { get; set; } = true;
    private bool HasRenderMapData { get; set; }
    private List<Telemetry> Telemetries { get; set; } = [];
    private DataContext Context { get; set; } = null!;
    private Osm? Map { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && Map != null && !HasRenderMapData)
        {
            await Map.AddMarkers(Telemetries.Select(GetMarker).ToList());

            HasRenderMapData = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();

        await FetchData();

        await base.OnInitializedAsync();
    }

    private async Task FetchData()
    {
        Loading = true;
        HasRenderMapData = false;
     
        if (Map != null)
        {
            await Map.ClearMarkers();
        }
        
        var twelveHours = DateTime.UtcNow.AddHours(-2);

        Telemetries = await Context.Telemetries
            .Include(n => n.Node)
            .Where(n => n.Type == Meshtastic.Protobufs.Telemetry.VariantOneofCase.EnvironmentMetrics)
            .CreatedAfter(twelveHours)
            .Where(n => n.Node.Latitude.HasValue && n.Node.Longitude.HasValue)
            .GroupBy(n => n.NodeId)
            .Select(a => a.OrderByDescending(b => b.CreatedAt).First())
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();

        Loading = false;
            
        await InvokeAsync(StateHasChanged); 
    }

    private Osm.Marker GetMarker(Telemetry telemetry)
    {
        var data = new List<string>();

        if (telemetry.Temperature.HasValue)
        {
            data.Add($"{telemetry.Temperature}°C");
        }

        if (telemetry.RelativeHumidity.HasValue)
        {
            data.Add($"{telemetry.RelativeHumidity}%");
        }

        if (telemetry.BarometricPressure.HasValue)
        {
            data.Add($"{telemetry.BarometricPressure}hPa");
        }
        
        return new Osm.Marker
        {
            Id = telemetry.Id.ToString(),
            Latitude = telemetry.Node.Latitude!.Value,
            Longitude = telemetry.Node.Longitude!.Value,
            Label = data.JoinString(" | "),
            Popup = $"<p><a href=\"/node/{telemetry.Id}\" target=\"_blank\" rel=\"nofollow\"><b>{telemetry.Node.AllNames}</b></a></p><p>{data.JoinString(" | ")}</p>"
        };
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }
}