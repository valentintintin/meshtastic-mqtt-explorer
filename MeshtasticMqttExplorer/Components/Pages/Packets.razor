@page "/packets"
@page "/node/{id:long}/packets"
@implements IAsyncDisposable

@using MeshtasticMqttExplorer.Context
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Components.Shared
@using MeshtasticMqttExplorer.Context.Entities
@using Node = MeshtasticMqttExplorer.Context.Entities.Node

@inject IDbContextFactory<DataContext> ContextFactory;
@inject NavigationManager NavigationManager

<PageTitle>Liste des trames envoyés</PageTitle>

@if (Id.HasValue)
{
    <PageHeader Title="Trames" OnBack="OnBack">
        <SubtitleTemplate>
            @Total trames @(Node?.AllNames) depuis les 15 derniers jours
        </SubtitleTemplate>
        <PageHeaderExtra>
            <Button OnClick="FetchData">Actualiser</Button>
        </PageHeaderExtra>
    </PageHeader>
}
else
{
    <PageHeader Title="Trames" OnBack="OnBack">
        <SubtitleTemplate>
            @Total trames
        </SubtitleTemplate>
        <PageHeaderExtra>
            <Button OnClick="FetchData">Actualiser</Button>
        </PageHeaderExtra>
    </PageHeader>
}

<Table TItem="Packet" DataSource="PacketsQueryable" Responsive
       PaginationPosition="bottomRight" Locale="Utils.TableLocale">
    <ChildContent>
        <PropertyColumn Property="c => c.PacketId" Title="ID" Filterable>
            <div style="width: 80px">
                <a href="/packet/@context.Id" target="_blank" rel="nofollow">@context.PacketId</a>
                @if (context.PacketDuplicated != null)
                {
                    <br/>
                    <text>Doublon avec </text><a href="/packet/@context.PacketDuplicatedId" target="_blank" rel="nofollow">@context.PacketDuplicated.PacketId</a>
                }
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.From.AllNames" Title="Expéditeur" Filterable>
            <div style="width: 150px">
                <a href="/node/@context.FromId" target="_blank" rel="nofollow">@context.From.AllNames</a>
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.To.AllNames" Title="Destinataire" Filterable>
            <div style="width: 150px">
                <a href="/node/@context.ToId" target="_blank" rel="nofollow">@context.To.AllNames</a>
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Gateway.AllNames" Title="Passerelle" Filterable>
            <div style="width: 150px">
                <a href="/node/@context.GatewayId" target="_blank" rel="nofollow">@context.Gateway.AllNames</a>
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.CreatedAt" Title="Date" Sortable Filterable DefaultSortOrder="SortDirection.Descending">
            <div style="width: 130px">
                <Date Value="context.CreatedAt"></Date>
            </div>
        </PropertyColumn>
        @* TODO fix hop difference *@
        <PropertyColumn Property="c => c.HopStart - c.HopLimit" Title="Sauts">
            <div style="width: 30px">
                <Tooltip Title="@("Début : " + context.HopStart + " | Limite : " + context.HopLimit)">
                    @Math.Abs(context.HopStart - context.HopLimit ?? 0)
                    @if (context.GatewayDistanceKm.HasValue)
                    {
                        @(" | " + Math.Round(context.GatewayDistanceKm.Value, 2) + " Km")
                    }
                </Tooltip>
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.MqttServer" Title="MQTT" Filters="Utils.MqttServerFilters">
            <div style="width: 100px">
                @context.MqttServer<br />@context.MqttTopic
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.PortNum" Title="Type" Filters="Utils.PortNumFilters"
                        Class="@(context.Encrypted ? "red" : "")">
            <div style="width: 70px">
                @(context.PortNum?.ToString() ?? "Chiffrée")
                @if (context.Encrypted && context.PortNum != null)
                {
                    <div>mais chiffrée avec AQ==</div>
                }
            </div>
        </PropertyColumn>
        <PropertyColumn Property="c => c.PayloadJson" Title="Contenu">
            <div style="max-height: 150px; width: 300px; overflow-y: scroll;">
                <PacketPayload Packet="context"></PacketPayload>
            </div>
        </PropertyColumn>
    </ChildContent>
</Table>

<style>
    .red {
        background-color: #ffccc7 !important;
    }
</style>

@code
{
    [Parameter]
    public long? Id { get; set; }

    private Node? Node { get; set; }
    private IQueryable<Packet> PacketsQueryable { get; set; } = null!;
    private int Total { get; set; }
    private DataContext Context { get; set; } = null!;

    private TableFilter<long>[] _channelFilters = [];

    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();
        
        PacketsQueryable =  PacketsQueryable = Context.Packets
            .Include(a => a.Channel)
            .Include(a => a.Gateway)
            .Include(a => a.From)
            .Include(a => a.To)
            .Include(a => a.PacketDuplicated)
            .Where(a => !Id.HasValue || a.From.Id == Id);
        
        var localContext = await ContextFactory.CreateDbContextAsync();

        _channelFilters = await localContext.Channels
            .OrderBy(c => c.Name)
            .Select(c => new TableFilter<long>
            {
                Text = c.Name,
                Value = c.Id
            }).ToArrayAsync();
        
        if (Id.HasValue)
        {
            Node = await Context.Nodes.FindAsync(Id);
        }
        
        Total = localContext.Packets.Count(a => !Id.HasValue || a.FromId == Id);

        await localContext.DisposeAsync();
        
        await base.OnInitializedAsync();
    }

    private void FetchData()
    {
        Total = Context.Packets.Count(a => !Id.HasValue || a.FromId == Id);
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }

    private void OnBack()
    {
        NavigationManager.NavigateTo($"/node/{Id}");
    }
}