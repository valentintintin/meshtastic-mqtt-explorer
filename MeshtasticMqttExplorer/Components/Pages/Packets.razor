@page "/packets"
@page "/node/{id:long}/packets"
@implements IAsyncDisposable

@using AntDesign.TableModels
@using MeshtasticMqttExplorer.Context
@using MeshtasticMqttExplorer.Context.Entities
@using Microsoft.EntityFrameworkCore
@using MeshtasticMqttExplorer.Components.Shared
@using Node = MeshtasticMqttExplorer.Context.Entities.Node

@inject IDbContextFactory<DataContext> ContextFactory;
@inject NavigationManager NavigationManager

<PageTitle>Liste des trames envoyés</PageTitle>

@if (Id.HasValue)
{
    <PageHeader Title="Trames" OnBack="OnBack">
        <SubtitleTemplate>
            @Total trames @(Node?.AllNames) depuis les 15 derniers jours
        </SubtitleTemplate>
        <PageHeaderExtra>
            <Button OnClick="FetchData">Actualiser</Button>
        </PageHeaderExtra>
    </PageHeader>
}
else
{
    <PageHeader Title="Trames" OnBack="OnBack">
        <SubtitleTemplate>
            @Total trames
        </SubtitleTemplate>
        <PageHeaderExtra>
            <Button OnClick="FetchData">Actualiser</Button>
        </PageHeaderExtra>
    </PageHeader>
}

<Table TItem="Packet" DataSource="PacketsQueryable" Responsive 
       RowClassName="@(x => x.Data.Encrypted ? "red" : "" )"
       PaginationPosition="bottomRight" Locale="Utils.TableLocale">
    <ChildContent>
        <PropertyColumn Property="c => c.PacketId" Title="ID" Filterable>
            @context.PacketId
        </PropertyColumn>
        <PropertyColumn Property="c => c.From.AllNames" Title="Expéditeur" Filterable>
            <a href="/node/@context.FromId" target="_blank">@context.From.AllNames</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.To.AllNames" Title="Destinataire" Filterable>
            <a href="/node/@context.ToId" target="_blank">@context.To.AllNames</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.Gateway.AllNames" Title="Passerelle" Filterable>
            <a href="/node/@context.GatewayId" target="_blank">@context.Gateway.AllNames</a>
        </PropertyColumn>
        <PropertyColumn Property="c => c.CreatedAt" Title="Date" Sortable Filterable DefaultSortOrder="SortDirection.Descending">
            <Date Value="context.CreatedAt"></Date>
        </PropertyColumn>
        <PropertyColumn Property="c => c.MqttServer" Title="MQTT" Filters="Utils.MqttServerFilters">
            @context.MqttServer - @context.MqttTopic
        </PropertyColumn>
        <PropertyColumn Property="c => c.Channel.Id" Title="Canal" Filters="_channelFilters">
            @context.Channel.Name
        </PropertyColumn>
        <PropertyColumn Property="c => c.PortNum" Title="Type" Filters="Utils.PortNumFilters">
            @(context.PortNum?.ToString() ?? "Chiffrée")
        </PropertyColumn>
        <PropertyColumn Property="c => c.PayloadJson" Title="Contenu">
            <PacketPayload Packet="context"></PacketPayload>
        </PropertyColumn>
    </ChildContent>
</Table>

<style>
    .red {
        background-color: #ffccc7 !important;
    }
</style>

@code
{
    [Parameter]
    public long? Id { get; set; }

    private Node? Node { get; set; }
    private IQueryable<Packet> PacketsQueryable { get; set; } = null!;
    private int Total { get; set; }
    private DataContext Context { get; set; } = null!;

    private TableFilter<long>[] _channelFilters = [];

    protected override async Task OnInitializedAsync()
    {
        Context = await ContextFactory.CreateDbContextAsync();
        
        PacketsQueryable =  PacketsQueryable = Context.Packets
            .Include(a => a.Channel)
            .Include(a => a.Gateway)
            .Include(a => a.From)
            .Include(a => a.To)
            .Where(a => !Id.HasValue || a.From.Id == Id);
        
        var localContext = await ContextFactory.CreateDbContextAsync();

        _channelFilters = await localContext.Channels
            .OrderBy(c => c.Name)
            .Select(c => new TableFilter<long>
            {
                Text = c.Name,
                Value = c.Id
            }).ToArrayAsync();
        
        if (Id.HasValue)
        {
            Node = await Context.Nodes.FindAsync(Id);
        }
        
        Total = localContext.Packets.Count(a => !Id.HasValue || a.FromId == Id);

        await localContext.DisposeAsync();
        
        await base.OnInitializedAsync();
    }

    private void FetchData()
    {
        Total = Context.Packets.Count(a => !Id.HasValue || a.FromId == Id);
    }

    public async ValueTask DisposeAsync()
    {
        await Context.DisposeAsync();
    }

    private void OnBack()
    {
        NavigationManager.NavigateTo($"/node/{Id}");
    }
}