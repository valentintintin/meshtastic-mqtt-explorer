@page "/proto-decoder"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Common.Extensions
@using Common.Services
@using Google.Protobuf
@using Meshtastic.Protobufs
@using Position = Meshtastic.Protobufs.Position
@using Telemetry = Meshtastic.Protobufs.Telemetry

@inject IMessageService MessageService
@inject MeshtasticService MeshtasticService

<PageTitle>Décodage ProtoBuf</PageTitle>

<PageHeader Title="Décodage ProtoBuf">
    <SubtitleTemplate>
        Test avec : @_messagesToTest.Select(m => m.GetType().Name).Order().JoinString()
    </SubtitleTemplate>
</PageHeader>

<Form Model="@_model"
      OnFinish="OnFinish"
      LabelColSpan="8"
      WrapperColSpan="16">
    <FormItem Label="Base64 du ProtoBuf">
        <Input @bind-Value="@context.Data" />
    </FormItem>
    <FormItem Label="Base64 d'une clé (optionnelle)">
        <Input @bind-Value="@context.Key" />
    </FormItem>
    <FormItem Label="ID de la trame (optionnel)">
        <Input @bind-Value="@context.PacketId" />
    </FormItem>
    <FormItem Label="ID du noeud (optionnel)">
        <Input @bind-Value="@context.NodeId" />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Décoder
        </Button>
    </FormItem>
</Form>

@if (_data != null)
{
    <Card Title="Résultat">
        <ChildContent>
            <div style="display: flex; gap: 16px; flex-wrap: wrap;">
                @foreach (var message in _messages)
                {
                    <div>
                        <b>@message.GetType().Name</b>
                        <pre>
                            @(JsonSerializer.Serialize<object>(message, JsonSerializerOptions))
                        </pre>
                    </div>
                }

                <div>
                    <b>TextMessage</b>
                    <pre>@Encoding.UTF8.GetString(_data)</pre>
                </div>
                
                @if (_nonce != null)
                {
                    <div>
                        <b>Nonce base64</b>
                        <pre>@Convert.ToBase64String(_nonce)</pre>
                    </div>
                    
                    <div>
                        <b>Decoded base64</b>
                        <pre>@Convert.ToBase64String(_data)</pre>
                    </div>
                }
            </div>
        </ChildContent>
    </Card>
}

@code
{
    private readonly List<IMessage> _messagesToTest = [
        new MeshPacket(),
        new ServiceEnvelope(),
        new FromRadio(),
        new ToRadio(),
        new Data(),
        new NodeInfo(),
        new User(),
        new Position(),
        new Telemetry(),
        new Neighbor(),
        new Waypoint(),
        new RouteDiscovery(),
        new Routing(),
        new MapReport(),
        new ChannelSet(),
        new AdminMessage(),
        new DeviceProfile(),
        new Config(),
    ];
    private readonly List<IMessage> _messages = [];
    private readonly Model _model = new();
    private byte[]? _data;
    private byte[]? _nonce;
    
    private static readonly JsonSerializerOptions JsonSerializerOptions = new()
    {
        WriteIndented = true,
        NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals
    };
    
    private async Task OnFinish(EditContext editContext)
    {
        _data = null;
        _nonce = null;
        
        if (string.IsNullOrWhiteSpace(_model.Data))
        {
            return;
        }
        
        var dataToDecode = _model.Data;
        
        if (!string.IsNullOrWhiteSpace(_model.Key) && _model is { PacketId: not null, NodeId: not null })
        {
            _nonce = MeshtasticService.CreateNonce(_model.PacketId.Value, _model.NodeId.Value);
            _data = MeshtasticService.Decrypt(Convert.FromBase64String(_model.Data), _model.Key, _model.PacketId.Value, _model.NodeId.Value).ToByteArray();
            
            if (_data == null) 
            {
                await MessageService.Error("Erreur durant le déchiffrement");
            }
        }
        else
        {
            try
            {
                _data = Convert.FromBase64String(dataToDecode);
            }
            catch (Exception)
            {
                await MessageService.Error("Erreur durant la conversion de la base64");
                return;
            }
        }

        _messages.Clear();

        foreach (var messageToTest in _messagesToTest.OrderBy(m => m.GetType().Name))
        {
            try
            {
                messageToTest.MergeFrom(_data);
                _messages.Add(messageToTest);
            }
            catch
            {
                // Ignored
            }
        }

        if (_messages.Count == 0)
        {
            await MessageService.Error("Le message n'a pas pu être décodé");
        }
    }

    private class Model
    {
        [Required] public string? Data { get; set; }

        public string? Key { get; set; } = "1PG7OiApB1nwvP+rz05pAQ==";
        public ulong? PacketId { get; set; }
        public uint? NodeId { get; set; }
    }
}
